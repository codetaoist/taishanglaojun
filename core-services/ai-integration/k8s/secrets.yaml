# 注意：这个文件包含敏感信息，在生产环境中应该使用外部密钥管理系统
# 如 AWS Secrets Manager, HashiCorp Vault, 或 Kubernetes External Secrets

apiVersion: v1
kind: Secret
metadata:
  name: advanced-ai-secret
  namespace: taishanglaojun
  labels:
    app: advanced-ai-service
    component: secrets
type: Opaque
data:
  # JWT密钥 (base64编码)
  # 生成命令: openssl rand -base64 32 | base64 -w 0
  jwt-secret: WW91ci1zdXBlci1zZWNyZXQtand0LWtleS1jaGFuZ2UtaW4tcHJvZHVjdGlvbg==
  
  # 数据库密码 (base64编码)
  # 原始值: taishanglaojun123
  db-password: dGFpc2hhbmdsYW9qdW4xMjM=
  
  # Redis密码 (base64编码，可选)
  # 原始值: (空)
  redis-password: ""
  
  # Grafana管理员密码 (base64编码)
  # 原始值: admin123
  grafana-password: YWRtaW4xMjM=

---
apiVersion: v1
kind: Secret
metadata:
  name: ai-provider-secrets
  namespace: taishanglaojun
  labels:
    app: advanced-ai-service
    component: ai-providers
type: Opaque
data:
  # OpenAI API密钥 (base64编码)
  # 请替换为实际的API密钥
  openai-api-key: ""
  
  # Anthropic API密钥 (base64编码)
  # 请替换为实际的API密钥
  anthropic-api-key: ""
  
  # Google API密钥 (base64编码)
  # 请替换为实际的API密钥
  google-api-key: ""
  
  # Azure OpenAI API密钥 (base64编码)
  azure-openai-api-key: ""
  
  # Hugging Face API密钥 (base64编码)
  huggingface-api-key: ""

---
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  namespace: taishanglaojun
  labels:
    app: advanced-ai-service
    component: registry
type: kubernetes.io/dockerconfigjson
data:
  # Docker registry认证信息 (base64编码)
  # 生成命令: kubectl create secret docker-registry docker-registry-secret \
  #   --docker-server=your-registry-server \
  #   --docker-username=your-username \
  #   --docker-password=your-password \
  #   --docker-email=your-email \
  #   --dry-run=client -o yaml
  .dockerconfigjson: eyJhdXRocyI6e319

---
apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
  namespace: taishanglaojun
  labels:
    app: nginx
    component: tls
type: kubernetes.io/tls
data:
  # TLS证书 (base64编码)
  # 生成自签名证书命令:
  # openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
  #   -keyout tls.key -out tls.crt \
  #   -subj "/CN=ai.taishanglaojun.com/O=taishanglaojun"
  # cat tls.crt | base64 -w 0
  tls.crt: ""
  
  # TLS私钥 (base64编码)
  # cat tls.key | base64 -w 0
  tls.key: ""

---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secrets
  namespace: taishanglaojun
  labels:
    app: prometheus
    component: monitoring
type: Opaque
data:
  # Slack Webhook URL (base64编码)
  slack-webhook-url: ""
  
  # Email SMTP密码 (base64编码)
  smtp-password: ""
  
  # PagerDuty集成密钥 (base64编码)
  pagerduty-key: ""

---
apiVersion: v1
kind: Secret
metadata:
  name: database-backup-secret
  namespace: taishanglaojun
  labels:
    app: postgres
    component: backup
type: Opaque
data:
  # S3访问密钥 (base64编码)
  aws-access-key-id: ""
  aws-secret-access-key: ""
  
  # 备份加密密钥 (base64编码)
  backup-encryption-key: ""

---
# 外部密钥管理器配置 (使用External Secrets Operator)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: taishanglaojun
spec:
  provider:
    vault:
      server: "https://vault.taishanglaojun.com"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "taishanglaojun-role"
          serviceAccountRef:
            name: "advanced-ai-service"

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: vault-secret
  namespace: taishanglaojun
spec:
  refreshInterval: 15s
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: vault-managed-secret
    creationPolicy: Owner
  data:
  - secretKey: jwt-secret
    remoteRef:
      key: taishanglaojun/ai-service
      property: jwt-secret
  - secretKey: db-password
    remoteRef:
      key: taishanglaojun/database
      property: password
  - secretKey: openai-api-key
    remoteRef:
      key: taishanglaojun/ai-providers
      property: openai-key

---
# AWS Secrets Manager配置
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: taishanglaojun
spec:
  provider:
    aws:
      service: SecretsManager
      region: us-west-2
      auth:
        serviceAccount:
          name: "advanced-ai-service"

---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: aws-managed-secret
  namespace: taishanglaojun
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: aws-managed-secret
    creationPolicy: Owner
  data:
  - secretKey: openai-api-key
    remoteRef:
      key: taishanglaojun/ai-providers
      property: openai_api_key
  - secretKey: anthropic-api-key
    remoteRef:
      key: taishanglaojun/ai-providers
      property: anthropic_api_key