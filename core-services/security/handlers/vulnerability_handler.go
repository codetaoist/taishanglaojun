package handlers

import (
	"net/http"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/codetaoist/taishanglaojun/core-services/security/services"
	"github.com/codetaoist/taishanglaojun/core-services/security/models"
)

// VulnerabilityHandler ?
type VulnerabilityHandler struct {
	vulnService *services.VulnerabilityService
}

// NewVulnerabilityHandler ?
func NewVulnerabilityHandler(vulnService *services.VulnerabilityService) *VulnerabilityHandler {
	return &VulnerabilityHandler{
		vulnService: vulnService,
	}
}

// CreateScanJob 
// @Summary 
// @Description 
// @Tags 
// @Accept json
// @Produce json
// @Param job body models.ScanJob true ""
// @Success 201 {object} models.ScanJob
// @Failure 400 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/vulnerabilities/scans [post]
func (h *VulnerabilityHandler) CreateScanJob(c *gin.Context) {
	var job models.ScanJob
	if err := c.ShouldBindJSON(&job); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Invalid request body",
			"details": err.Error(),
		})
		return
	}

	// 
	if job.Target == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Target is required",
		})
		return
	}

	if job.ScanType == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Scan type is required",
		})
		return
	}

	if err := h.vulnService.CreateScanJob(c.Request.Context(), &job); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to create scan job",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusCreated, job)
}

// GetScanJobs 
// @Summary 
// @Description ?
// @Tags 
// @Accept json
// @Produce json
// @Param status query string false "?
// @Param scan_type query string false ""
// @Param target query string false ""
// @Param page query int false "" default(1)
// @Param limit query int false "" default(20)
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/vulnerabilities/scans [get]
func (h *VulnerabilityHandler) GetScanJobs(c *gin.Context) {
	status := c.Query("status")
	scanType := c.Query("scan_type")
	target := c.Query("target")
	
	page, _ := strconv.Atoi(c.DefaultQuery("page", "1"))
	limit, _ := strconv.Atoi(c.DefaultQuery("limit", "20"))
	
	if page < 1 {
		page = 1
	}
	if limit < 1 || limit > 100 {
		limit = 20
	}
	
	offset := (page - 1) * limit

	jobs, err := h.vulnService.GetScanJobs(c.Request.Context(), status, scanType, target, limit, offset)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to get scan jobs",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"data": jobs,
		"pagination": gin.H{
			"page":  page,
			"limit": limit,
			"total": len(jobs),
		},
	})
}

// GetScanJob 
// @Summary 
// @Description ID
// @Tags 
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Success 200 {object} models.ScanJob
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/vulnerabilities/scans/{id} [get]
func (h *VulnerabilityHandler) GetScanJob(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Scan job ID is required",
		})
		return
	}

	job, err := h.vulnService.GetScanJob(c.Request.Context(), id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"error":   "Scan job not found",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, job)
}

// UpdateScanJob 
// @Summary 
// @Description 
// @Tags 
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Param updates body map[string]interface{} true ""
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]interface{}
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/vulnerabilities/scans/{id} [put]
func (h *VulnerabilityHandler) UpdateScanJob(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Scan job ID is required",
		})
		return
	}

	var updates map[string]interface{}
	if err := c.ShouldBindJSON(&updates); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Invalid request body",
			"details": err.Error(),
		})
		return
	}

	if err := h.vulnService.UpdateScanJob(c.Request.Context(), id, updates); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to update scan job",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "Scan job updated successfully",
	})
}

// DeleteScanJob 
// @Summary 
// @Description ID
// @Tags 
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Success 200 {object} map[string]interface{}
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/vulnerabilities/scans/{id} [delete]
func (h *VulnerabilityHandler) DeleteScanJob(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Scan job ID is required",
		})
		return
	}

	if err := h.vulnService.DeleteScanJob(c.Request.Context(), id); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to delete scan job",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "Scan job deleted successfully",
	})
}

// StartScan 
// @Summary 
// @Description ?
// @Tags 
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]interface{}
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/vulnerabilities/scans/{id}/start [post]
func (h *VulnerabilityHandler) StartScan(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Scan job ID is required",
		})
		return
	}

	if err := h.vulnService.StartScan(c.Request.Context(), id); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to start scan",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "Scan started successfully",
	})
}

// StopScan 
// @Summary 
// @Description ?
// @Tags 
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]interface{}
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/vulnerabilities/scans/{id}/stop [post]
func (h *VulnerabilityHandler) StopScan(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Scan job ID is required",
		})
		return
	}

	if err := h.vulnService.StopScan(c.Request.Context(), id); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to stop scan",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "Scan stopped successfully",
	})
}

// GetVulnerabilities 
// @Summary 
// @Description ?
// @Tags 
// @Accept json
// @Produce json
// @Param severity query string false ""
// @Param status query string false "?
// @Param scan_job_id query string false "ID"
// @Param page query int false "" default(1)
// @Param limit query int false "" default(20)
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/vulnerabilities [get]
func (h *VulnerabilityHandler) GetVulnerabilities(c *gin.Context) {
	severity := c.Query("severity")
	status := c.Query("status")
	scanJobID := c.Query("scan_job_id")
	
	page, _ := strconv.Atoi(c.DefaultQuery("page", "1"))
	limit, _ := strconv.Atoi(c.DefaultQuery("limit", "20"))
	
	if page < 1 {
		page = 1
	}
	if limit < 1 || limit > 100 {
		limit = 20
	}
	
	offset := (page - 1) * limit

	vulnerabilities, err := h.vulnService.GetVulnerabilities(c.Request.Context(), severity, status, scanJobID, limit, offset)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to get vulnerabilities",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"data": vulnerabilities,
		"pagination": gin.H{
			"page":  page,
			"limit": limit,
			"total": len(vulnerabilities),
		},
	})
}

// GetVulnerability 
// @Summary 
// @Description ID
// @Tags 
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Success 200 {object} models.Vulnerability
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/vulnerabilities/{id} [get]
func (h *VulnerabilityHandler) GetVulnerability(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Vulnerability ID is required",
		})
		return
	}

	vulnerability, err := h.vulnService.GetVulnerability(c.Request.Context(), id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"error":   "Vulnerability not found",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, vulnerability)
}

// UpdateVulnerability 
// @Summary 
// @Description 
// @Tags 
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Param updates body map[string]interface{} true ""
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]interface{}
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/vulnerabilities/{id} [put]
func (h *VulnerabilityHandler) UpdateVulnerability(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Vulnerability ID is required",
		})
		return
	}

	var updates map[string]interface{}
	if err := c.ShouldBindJSON(&updates); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Invalid request body",
			"details": err.Error(),
		})
		return
	}

	if err := h.vulnService.UpdateVulnerability(c.Request.Context(), id, updates); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to update vulnerability",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "Vulnerability updated successfully",
	})
}

// DeleteVulnerability 
// @Summary 
// @Description ID
// @Tags 
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Success 200 {object} map[string]interface{}
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/vulnerabilities/{id} [delete]
func (h *VulnerabilityHandler) DeleteVulnerability(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Vulnerability ID is required",
		})
		return
	}

	if err := h.vulnService.DeleteVulnerability(c.Request.Context(), id); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to delete vulnerability",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "Vulnerability deleted successfully",
	})
}

// GetVulnerabilityStats 
// @Summary 
// @Description ?
// @Tags 
// @Accept json
// @Produce json
// @Success 200 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/vulnerabilities/stats [get]
func (h *VulnerabilityHandler) GetVulnerabilityStats(c *gin.Context) {
	stats, err := h.vulnService.GetVulnerabilityStats(c.Request.Context())
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to get vulnerability statistics",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, stats)
}

// ExportVulnerabilities 
// @Summary 
// @Description ?
// @Tags 
// @Accept json
// @Produce json
// @Param format query string false "" default(json)
// @Param scan_job_id query string false "ID"
// @Param severity query string false ""
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/vulnerabilities/export [get]
func (h *VulnerabilityHandler) ExportVulnerabilities(c *gin.Context) {
	format := c.DefaultQuery("format", "json")
	scanJobID := c.Query("scan_job_id")
	severity := c.Query("severity")

	// 
	vulnerabilities, err := h.vulnService.GetVulnerabilities(c.Request.Context(), severity, "", scanJobID, 1000, 0)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to get vulnerabilities for export",
			"details": err.Error(),
		})
		return
	}

	// 
	switch format {
	case "json":
		c.Header("Content-Disposition", "attachment; filename=vulnerabilities.json")
		c.JSON(http.StatusOK, gin.H{
			"export_time":     time.Now(),
			"total_count":     len(vulnerabilities),
			"vulnerabilities": vulnerabilities,
		})
	case "csv":
		c.Header("Content-Type", "text/csv")
		c.Header("Content-Disposition", "attachment; filename=vulnerabilities.csv")
		
		// CSV?
		c.String(http.StatusOK, "CSV export not implemented yet")
	default:
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Unsupported export format",
		})
	}
}

// GetScanProgress 
// @Summary 
// @Description ?
// @Tags 
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Success 200 {object} map[string]interface{}
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/vulnerabilities/scans/{id}/progress [get]
func (h *VulnerabilityHandler) GetScanProgress(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Scan job ID is required",
		})
		return
	}

	job, err := h.vulnService.GetScanJob(c.Request.Context(), id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"error":   "Scan job not found",
			"details": err.Error(),
		})
		return
	}

	// 
	progress := 0
	if job.Status == "completed" {
		progress = 100
	} else if job.Status == "running" {
		// 
		progress = 50
	}

	c.JSON(http.StatusOK, gin.H{
		"scan_job_id": id,
		"status":      job.Status,
		"progress":    progress,
		"start_time":  job.StartTime,
		"end_time":    job.EndTime,
	})
}

// StartVulnerabilityService 
// @Summary 
// @Description 
// @Tags 
// @Accept json
// @Produce json
// @Success 200 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/vulnerabilities/service/start [post]
func (h *VulnerabilityHandler) StartVulnerabilityService(c *gin.Context) {
	h.vulnService.Start()
	
	c.JSON(http.StatusOK, gin.H{
		"message": "Vulnerability service started successfully",
	})
}

// StopVulnerabilityService 
// @Summary 
// @Description 
// @Tags 
// @Accept json
// @Produce json
// @Success 200 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/vulnerabilities/service/stop [post]
func (h *VulnerabilityHandler) StopVulnerabilityService(c *gin.Context) {
	h.vulnService.Stop()
	
	c.JSON(http.StatusOK, gin.H{
		"message": "Vulnerability service stopped successfully",
	})
}

// GetServiceStatus ?
// @Summary ?
// @Description ?
// @Tags 
// @Accept json
// @Produce json
// @Success 200 {object} map[string]interface{}
// @Router /api/security/vulnerabilities/service/status [get]
func (h *VulnerabilityHandler) GetServiceStatus(c *gin.Context) {
	// 
	c.JSON(http.StatusOK, gin.H{
		"status":    "running",
		"timestamp": time.Now(),
	})
}

