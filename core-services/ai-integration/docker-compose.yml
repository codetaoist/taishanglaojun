version: '3.8'

# 太上老君AI平台 - 高级AI功能 Docker Compose 配置
# 版本: 1.0.0
# 作者: 太上老君AI团队

services:
  # 主服务 - 高级AI功能
  advanced-ai-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - BUILD_MODE=release
    image: taishanglaojun/advanced-ai:latest
    container_name: taishanglaojun-advanced-ai
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # 基础配置
      - ENVIRONMENT=production
      - SERVICE_NAME=advanced-ai-service
      - SERVICE_VERSION=1.0.0
      
      # 服务器配置
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      - SERVER_READ_TIMEOUT=30s
      - SERVER_WRITE_TIMEOUT=30s
      - SERVER_IDLE_TIMEOUT=60s
      
      # 数据库配置
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=taishanglaojun
      - DB_USER=taishanglaojun
      - DB_PASSWORD=taishanglaojun123
      - DB_SSL_MODE=disable
      - DB_MAX_OPEN_CONNS=25
      - DB_MAX_IDLE_CONNS=5
      - DB_CONN_MAX_LIFETIME=300s
      
      # Redis配置
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      - REDIS_POOL_SIZE=10
      - REDIS_MIN_IDLE_CONNS=5
      
      # JWT配置
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRY=24h
      - JWT_REFRESH_EXPIRY=168h
      
      # AGI配置
      - AGI_ENABLED=true
      - AGI_MAX_CONCURRENT_TASKS=10
      - AGI_TASK_TIMEOUT=300s
      - AGI_CACHE_ENABLED=true
      - AGI_CACHE_TTL=3600s
      
      # 元学习配置
      - META_LEARNING_ENABLED=true
      - META_LEARNING_MAX_TASKS=100
      - META_LEARNING_BATCH_SIZE=32
      - META_LEARNING_LEARNING_RATE=0.001
      
      # 自我进化配置
      - EVOLUTION_ENABLED=true
      - EVOLUTION_POPULATION_SIZE=50
      - EVOLUTION_GENERATIONS=100
      - EVOLUTION_MUTATION_RATE=0.1
      
      # 监控配置
      - MONITORING_ENABLED=true
      - METRICS_ENABLED=true
      - HEALTH_CHECK_INTERVAL=30s
      - PERFORMANCE_MONITORING=true
      
      # 日志配置
      - LOG_LEVEL=info
      - LOG_FORMAT=json
      - LOG_OUTPUT=stdout
      - LOG_FILE_ENABLED=true
      - LOG_FILE_PATH=/app/logs/app.log
      
      # 安全配置
      - CORS_ENABLED=true
      - CORS_ORIGINS=*
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_REQUESTS=1000
      - RATE_LIMIT_WINDOW=1h
      
      # 缓存配置
      - CACHE_ENABLED=true
      - CACHE_DEFAULT_TTL=3600s
      - CACHE_MAX_SIZE=1000
      
      # 外部服务配置
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}
      
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - taishanglaojun-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/advanced-ai/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'

  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: taishanglaojun-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=taishanglaojun
      - POSTGRES_USER=taishanglaojun
      - POSTGRES_PASSWORD=taishanglaojun123
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - taishanglaojun-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taishanglaojun -d taishanglaojun"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: taishanglaojun-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - taishanglaojun-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: taishanglaojun-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus:/etc/prometheus:ro
      - prometheus_data:/prometheus
    networks:
      - taishanglaojun-network
    depends_on:
      - advanced-ai-service
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Grafana 可视化
  grafana:
    image: grafana/grafana:latest
    container_name: taishanglaojun-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - taishanglaojun-network
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: taishanglaojun-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - taishanglaojun-network
    depends_on:
      - advanced-ai-service
      - grafana
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Elasticsearch (可选 - 用于日志聚合)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: taishanglaojun-elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - taishanglaojun-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    profiles:
      - logging

  # Kibana (可选 - 用于日志可视化)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: taishanglaojun-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - taishanglaojun-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    profiles:
      - logging

  # Jaeger (可选 - 用于分布式追踪)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: taishanglaojun-jaeger
    restart: unless-stopped
    ports:
      - "16686:16686"
      - "14268:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - taishanglaojun-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    profiles:
      - tracing

# 网络配置
networks:
  taishanglaojun-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/redis
  
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/grafana
  
  elasticsearch_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/elasticsearch

# 扩展配置
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# 应用默认日志配置到所有服务
x-common-variables: &common-variables
  logging: *default-logging