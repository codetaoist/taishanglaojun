package handlers

import (
	"net/http"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/codetaoist/taishanglaojun/core-services/security/services"
	"github.com/codetaoist/taishanglaojun/core-services/security/models"
)

// PentestHandler 
type PentestHandler struct {
	pentestService *services.PentestService
}

// NewPentestHandler 
func NewPentestHandler(pentestService *services.PentestService) *PentestHandler {
	return &PentestHandler{
		pentestService: pentestService,
	}
}

// CreateProject ?
// @Summary ?
// @Description ?
// @Tags ?
// @Accept json
// @Produce json
// @Param project body models.PentestProject true ""
// @Success 201 {object} models.PentestProject
// @Failure 400 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/pentest/projects [post]
func (h *PentestHandler) CreateProject(c *gin.Context) {
	var project models.PentestProject
	if err := c.ShouldBindJSON(&project); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Invalid request body",
			"details": err.Error(),
		})
		return
	}

	// 
	if project.Name == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Project name is required",
		})
		return
	}

	if project.Target == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Target is required",
		})
		return
	}

	if err := h.pentestService.CreateProject(c.Request.Context(), &project); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to create pentest project",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusCreated, project)
}

// GetProjects ?
// @Summary ?
// @Description ?
// @Tags ?
// @Accept json
// @Produce json
// @Param status query string false "?
// @Param target query string false ""
// @Param tester query string false ""
// @Param page query int false "" default(1)
// @Param limit query int false "" default(20)
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/pentest/projects [get]
func (h *PentestHandler) GetProjects(c *gin.Context) {
	status := c.Query("status")
	target := c.Query("target")
	tester := c.Query("tester")
	
	page, _ := strconv.Atoi(c.DefaultQuery("page", "1"))
	limit, _ := strconv.Atoi(c.DefaultQuery("limit", "20"))
	
	if page < 1 {
		page = 1
	}
	if limit < 1 || limit > 100 {
		limit = 20
	}
	
	offset := (page - 1) * limit

	projects, err := h.pentestService.GetProjects(c.Request.Context(), status, target, tester, limit, offset)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to get pentest projects",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"data": projects,
		"pagination": gin.H{
			"page":  page,
			"limit": limit,
			"total": len(projects),
		},
	})
}

// GetProject ?
// @Summary ?
// @Description ID?
// @Tags ?
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Success 200 {object} models.PentestProject
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/pentest/projects/{id} [get]
func (h *PentestHandler) GetProject(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Project ID is required",
		})
		return
	}

	project, err := h.pentestService.GetProject(c.Request.Context(), id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"error":   "Pentest project not found",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, project)
}

// UpdateProject ?
// @Summary ?
// @Description ?
// @Tags ?
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Param updates body map[string]interface{} true ""
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]interface{}
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/pentest/projects/{id} [put]
func (h *PentestHandler) UpdateProject(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Project ID is required",
		})
		return
	}

	var updates map[string]interface{}
	if err := c.ShouldBindJSON(&updates); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Invalid request body",
			"details": err.Error(),
		})
		return
	}

	if err := h.pentestService.UpdateProject(c.Request.Context(), id, updates); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to update pentest project",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "Pentest project updated successfully",
	})
}

// DeleteProject ?
// @Summary ?
// @Description ID?
// @Tags ?
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Success 200 {object} map[string]interface{}
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/pentest/projects/{id} [delete]
func (h *PentestHandler) DeleteProject(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Project ID is required",
		})
		return
	}

	if err := h.pentestService.DeleteProject(c.Request.Context(), id); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to delete pentest project",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "Pentest project deleted successfully",
	})
}

// StartProject ?
// @Summary ?
// @Description ?
// @Tags ?
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]interface{}
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/pentest/projects/{id}/start [post]
func (h *PentestHandler) StartProject(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Project ID is required",
		})
		return
	}

	if err := h.pentestService.StartProject(c.Request.Context(), id); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to start pentest project",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "Pentest project started successfully",
	})
}

// StopProject ?
// @Summary ?
// @Description ?
// @Tags ?
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]interface{}
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/pentest/projects/{id}/stop [post]
func (h *PentestHandler) StopProject(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Project ID is required",
		})
		return
	}

	if err := h.pentestService.StopProject(c.Request.Context(), id); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to stop pentest project",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "Pentest project stopped successfully",
	})
}

// GetResults ?
// @Summary ?
// @Description ?
// @Tags ?
// @Accept json
// @Produce json
// @Param project_id query string true "ID"
// @Param page query int false "" default(1)
// @Param limit query int false "" default(20)
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/pentest/results [get]
func (h *PentestHandler) GetResults(c *gin.Context) {
	projectID := c.Query("project_id")
	if projectID == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Project ID is required",
		})
		return
	}

	page, _ := strconv.Atoi(c.DefaultQuery("page", "1"))
	limit, _ := strconv.Atoi(c.DefaultQuery("limit", "20"))
	
	if page < 1 {
		page = 1
	}
	if limit < 1 || limit > 100 {
		limit = 20
	}
	
	offset := (page - 1) * limit

	results, err := h.pentestService.GetResults(c.Request.Context(), projectID, limit, offset)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to get pentest results",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"data": results,
		"pagination": gin.H{
			"page":  page,
			"limit": limit,
			"total": len(results),
		},
	})
}

// GetResult ?
// @Summary ?
// @Description ID?
// @Tags ?
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Success 200 {object} models.PentestResult
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/pentest/results/{id} [get]
func (h *PentestHandler) GetResult(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Result ID is required",
		})
		return
	}

	result, err := h.pentestService.GetResult(c.Request.Context(), id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"error":   "Pentest result not found",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, result)
}

// UpdateResult ?
// @Summary ?
// @Description ?
// @Tags ?
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Param updates body map[string]interface{} true ""
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]interface{}
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/pentest/results/{id} [put]
func (h *PentestHandler) UpdateResult(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Result ID is required",
		})
		return
	}

	var updates map[string]interface{}
	if err := c.ShouldBindJSON(&updates); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Invalid request body",
			"details": err.Error(),
		})
		return
	}

	if err := h.pentestService.UpdateResult(c.Request.Context(), id, updates); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to update pentest result",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "Pentest result updated successfully",
	})
}

// DeleteResult ?
// @Summary ?
// @Description ID?
// @Tags ?
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Success 200 {object} map[string]interface{}
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/pentest/results/{id} [delete]
func (h *PentestHandler) DeleteResult(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Result ID is required",
		})
		return
	}

	if err := h.pentestService.DeleteResult(c.Request.Context(), id); err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to delete pentest result",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "Pentest result deleted successfully",
	})
}

// GenerateReport ?
// @Summary ?
// @Description ?
// @Tags ?
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Param format query string false "" default(pdf)
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]interface{}
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/pentest/projects/{id}/report [post]
func (h *PentestHandler) GenerateReport(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Project ID is required",
		})
		return
	}

	format := c.DefaultQuery("format", "pdf")

	reportPath, err := h.pentestService.GenerateReport(c.Request.Context(), id, format)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to generate pentest report",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message":     "Report generated successfully",
		"report_path": reportPath,
		"format":      format,
		"generated_at": time.Now(),
	})
}

// GetProjectProgress 
// @Summary 
// @Description 
// @Tags ?
// @Accept json
// @Produce json
// @Param id path string true "ID"
// @Success 200 {object} map[string]interface{}
// @Failure 404 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/pentest/projects/{id}/progress [get]
func (h *PentestHandler) GetProjectProgress(c *gin.Context) {
	id := c.Param("id")
	if id == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Project ID is required",
		})
		return
	}

	project, err := h.pentestService.GetProject(c.Request.Context(), id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"error":   "Pentest project not found",
			"details": err.Error(),
		})
		return
	}

	// 
	progress := 0
	switch project.Status {
	case "completed":
		progress = 100
	case "running":
		progress = 50
	case "planning":
		progress = 10
	default:
		progress = 0
	}

	c.JSON(http.StatusOK, gin.H{
		"project_id":  id,
		"status":      project.Status,
		"progress":    progress,
		"start_time":  project.StartTime,
		"end_time":    project.EndTime,
		"current_phase": project.CurrentPhase,
	})
}

// GetPentestStats ?
// @Summary ?
// @Description 
// @Tags ?
// @Accept json
// @Produce json
// @Success 200 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/pentest/stats [get]
func (h *PentestHandler) GetPentestStats(c *gin.Context) {
	stats, err := h.pentestService.GetPentestStats(c.Request.Context())
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to get pentest statistics",
			"details": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, stats)
}

// ExportProjects ?
// @Summary ?
// @Description 
// @Tags ?
// @Accept json
// @Produce json
// @Param format query string false "" default(json)
// @Param status query string false "?
// @Success 200 {object} map[string]interface{}
// @Failure 400 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/pentest/projects/export [get]
func (h *PentestHandler) ExportProjects(c *gin.Context) {
	format := c.DefaultQuery("format", "json")
	status := c.Query("status")

	// 
	projects, err := h.pentestService.GetProjects(c.Request.Context(), status, "", "", 1000, 0)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to get projects for export",
			"details": err.Error(),
		})
		return
	}

	// 
	switch format {
	case "json":
		c.Header("Content-Disposition", "attachment; filename=pentest_projects.json")
		c.JSON(http.StatusOK, gin.H{
			"export_time":  time.Now(),
			"total_count":  len(projects),
			"projects":     projects,
		})
	case "csv":
		c.Header("Content-Type", "text/csv")
		c.Header("Content-Disposition", "attachment; filename=pentest_projects.csv")
		
		// CSV?
		c.String(http.StatusOK, "CSV export not implemented yet")
	default:
		c.JSON(http.StatusBadRequest, gin.H{
			"error": "Unsupported export format",
		})
	}
}

// StartPentestService ?
// @Summary ?
// @Description ?
// @Tags ?
// @Accept json
// @Produce json
// @Success 200 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/pentest/service/start [post]
func (h *PentestHandler) StartPentestService(c *gin.Context) {
	h.pentestService.Start()
	
	c.JSON(http.StatusOK, gin.H{
		"message": "Pentest service started successfully",
	})
}

// StopPentestService ?
// @Summary ?
// @Description ?
// @Tags ?
// @Accept json
// @Produce json
// @Success 200 {object} map[string]interface{}
// @Failure 500 {object} map[string]interface{}
// @Router /api/security/pentest/service/stop [post]
func (h *PentestHandler) StopPentestService(c *gin.Context) {
	h.pentestService.Stop()
	
	c.JSON(http.StatusOK, gin.H{
		"message": "Pentest service stopped successfully",
	})
}

// GetServiceStatus ?
// @Summary ?
// @Description ?
// @Tags ?
// @Accept json
// @Produce json
// @Success 200 {object} map[string]interface{}
// @Router /api/security/pentest/service/status [get]
func (h *PentestHandler) GetServiceStatus(c *gin.Context) {
	// 
	c.JSON(http.StatusOK, gin.H{
		"status":    "running",
		"timestamp": time.Now(),
	})
}

