# 太上老君AI平台 - Docker Compose配置
# Taishang Laojun AI Platform - Docker Compose Configuration

version: '3.8'

services:
  # PostgreSQL数据库
  postgresql:
    image: postgres:15-alpine
    container_name: taishang-postgresql
    environment:
      POSTGRES_DB: taishang_laojun
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgresql_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - taishang_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: taishang-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - taishang_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # 核心服务
  core-services:
    build:
      context: ..
      dockerfile: docker/Dockerfile.core-services
    container_name: taishang-core-services
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-changeme}@postgresql:5432/taishang_laojun?sslmode=disable
      - REDIS_URL=redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
      - API_PORT=8080
      - LOG_LEVEL=info
      - ENVIRONMENT=${ENVIRONMENT:-development}
    ports:
      - "8080:8080"
    networks:
      - taishang_network
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # 本地化服务
  localization-service:
    build:
      context: ..
      dockerfile: docker/Dockerfile.localization-service
    container_name: taishang-localization-service
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-changeme}@postgresql:5432/taishang_laojun?sslmode=disable
      - REDIS_URL=redis://:${REDIS_PASSWORD:-changeme}@redis:6379/1
      - API_PORT=8081
      - LOG_LEVEL=info
      - ENVIRONMENT=${ENVIRONMENT:-development}
    ports:
      - "8081:8081"
    networks:
      - taishang_network
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # 合规性服务
  compliance-service:
    build:
      context: ..
      dockerfile: docker/Dockerfile.compliance-service
    container_name: taishang-compliance-service
    environment:
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD:-changeme}@postgresql:5432/taishang_laojun?sslmode=disable
      - REDIS_URL=redis://:${REDIS_PASSWORD:-changeme}@redis:6379/2
      - API_PORT=8082
      - LOG_LEVEL=info
      - ENVIRONMENT=${ENVIRONMENT:-development}
    ports:
      - "8082:8082"
    networks:
      - taishang_network
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # 前端应用
  frontend:
    build:
      context: ..
      dockerfile: docker/Dockerfile.frontend
    container_name: taishang-frontend
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8080/api
      - REACT_APP_ENVIRONMENT=${ENVIRONMENT:-development}
    ports:
      - "80:8080"
    networks:
      - taishang_network
    depends_on:
      - core-services
      - localization-service
      - compliance-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Prometheus监控
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: taishang-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - taishang_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Grafana仪表板
  grafana:
    image: grafana/grafana:10.0.0
    container_name: taishang-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    networks:
      - taishang_network
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Jaeger分布式追踪
  jaeger:
    image: jaegertracing/all-in-one:1.47
    container_name: taishang-jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14250:14250"
      - "4317:4317"
      - "4318:4318"
    networks:
      - taishang_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

volumes:
  postgresql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  taishang_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16