package services

import (
	"encoding/json $args[0].Value -replace '\n\s*', '' strings $args[0].Value -replace '\n\s*', '' testing $args[0].Value -replace '\n\s*', '' time $args[0].Value -replace '\n\s*', '' github.com/stretchr/testify/assert $args[0].Value -replace '\n\s*', '' github.com/stretchr/testify/mock $args[0].Value -replace '\n\s*', '' github.com/stretchr/testify/suite $args[0].Value -replace '\n\s*', '' comprehensive $args[0].Value -replace '\n\s*', '' summary", "threats", "vulnerabilities", "compliance $args[0].Value -replace '\n\s*', '' json $args[0].Value -replace '\n\s*', '' json $args[0].Value -replace '\n\s*', '' id $args[0].Value -replace '\n\s*', '' type $args[0].Value -replace '\n\s*', '' csv $args[0].Value -replace '\n\s*', '' Report ID $args[0].Value -replace '\n\s*', '' Type $args[0].Value -replace '\n\s*', '' Generated At $args[0].Value -replace '\n\s*', '' html $args[0].Value -replace '\n\s*', '' <html> $args[0].Value -replace '\n\s*', '' <title> $args[0].Value -replace '\n\s*', '' </html> $args[0].Value -replace '\n\s*', '' unsupported $args[0].Value -replace '\n\s*', '' unsupported format $args[0].Value -replace '\n\s*', '' GetSecurityMetrics $args[0].Value -replace '\n\s*', '' threat-1 $args[0].Value -replace '\n\s*', '' sql_injection $args[0].Value -replace '\n\s*', '' high $args[0].Value -replace '\n\s*', '' 192.168.1.100 $args[0].Value -replace '\n\s*', '' web-server $args[0].Value -replace '\n\s*', '' threat-2 $args[0].Value -replace '\n\s*', '' xss $args[0].Value -replace '\n\s*', '' medium $args[0].Value -replace '\n\s*', '' 192.168.1.101 $args[0].Value -replace '\n\s*', '' web-app $args[0].Value -replace '\n\s*', '' sql_injection", "xss $args[0].Value -replace '\n\s*', '' 192.168.1.100", "192.168.1.101 $args[0].Value -replace '\n\s*', '' GetThreats $args[0].Value -replace '\n\s*', '' GetThreatStatistics $args[0].Value -replace '\n\s*', '' vuln-1 $args[0].Value -replace '\n\s*', '' SQL Injection in Login $args[0].Value -replace '\n\s*', '' high $args[0].Value -replace '\n\s*', '' open $args[0].Value -replace '\n\s*', '' SQL injection vulnerability in login form $args[0].Value -replace '\n\s*', '' vuln-2 $args[0].Value -replace '\n\s*', '' XSS in Comments $args[0].Value -replace '\n\s*', '' medium $args[0].Value -replace '\n\s*', '' fixed $args[0].Value -replace '\n\s*', '' Cross-site scripting in comment section $args[0].Value -replace '\n\s*', '' GetVulnerabilities $args[0].Value -replace '\n\s*', '' GetScanCoverage $args[0].Value -replace '\n\s*', '' ISO27001 $args[0].Value -replace '\n\s*', '' ISO27001-A.5.1.1 $args[0].Value -replace '\n\s*', '' Information Security Policy $args[0].Value -replace '\n\s*', '' compliant $args[0].Value -replace '\n\s*', '' ISO27001-A.6.1.1 $args[0].Value -replace '\n\s*', '' Information Security Roles $args[0].Value -replace '\n\s*', '' non_compliant $args[0].Value -replace '\n\s*', '' GetComplianceStatus $args[0].Value -replace '\n\s*', '' high", "medium", "low $args[0].Value -replace '\n\s*', '' immediate", "short_term", "long_term $args[0].Value -replace '\n\s*', '' threat-1", Type: "sql_injection", Severity: "high $args[0].Value -replace '\n\s*', '' GetThreats $args[0].Value -replace '\n\s*', '' GetThreatStatistics $args[0].Value -replace '\n\s*', '' vuln-1", Title: "Test Vuln", Severity: "medium $args[0].Value -replace '\n\s*', '' GetVulnerabilities $args[0].Value -replace '\n\s*', '' GetScanCoverage $args[0].Value -replace '\n\s*', '' GetSecurityMetrics $args[0].Value -replace '\n\s*', '' ISO27001 $args[0].Value -replace '\n\s*', '' GetComplianceStatus $args[0].Value -replace '\n\s*', '' test-report-1 $args[0].Value -replace '\n\s*', '' comprehensive $args[0].Value -replace '\n\s*', '' ISO27001 $args[0].Value -replace '\n\s*', '' comprehensive $args[0].Value -replace '\n\s*', '' summary", "threats $args[0].Value -replace '\n\s*', '' json $args[0].Value -replace '\n\s*', '' threat-1", Type: "test", Severity: "medium $args[0].Value -replace '\n\s*', '' GetThreats $args[0].Value -replace '\n\s*', '' GetThreatStatistics $args[0].Value -replace '\n\s*', '' GetSecurityMetrics $args[0].Value -replace '\n\s*', '' benchmark-report $args[0].Value -replace '\n\s*', '' test $args[0].Value -replace '\n\s*', '' json $args[0].Value -replace '\n\s*', '' Valid time range $args[0].Value -replace '\n\s*', '' Invalid time range (end before start) $args[0].Value -replace '\n\s*', '' Same start and end time",
			timeRange: TimeRange{
				Start: time.Now(),
				End:   time.Now(),
			},
			valid: true,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			isValid := tt.timeRange.End.After(tt.timeRange.Start) || tt.timeRange.End.Equal(tt.timeRange.Start)
			assert.Equal(t, tt.valid, isValid)
		})
	}
}

