import React, { useState, useEffect } from 'react';
import { Card, Table, Button, Tag, Space, Modal, Form, Input, Select, Progress, Row, Col, Statistic, Descriptions, Tabs } from 'antd';
import { BugOutlined, ScanOutlined, CheckCircleOutlined, ExclamationCircleOutlined, EyeOutlined, PlayCircleOutlined } from '@ant-design/icons';
import type { ColumnsType } from 'antd/es/table';

const { Option } = Select;

interface Vulnerability {
  id: string;
  title: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  cvssScore: number;
  category: string;
  affectedAsset: string;
  status: 'open' | 'in_progress' | 'resolved' | 'accepted_risk';
  discoveredAt: string;
  description: string;
  solution: string;
}

interface ScanJob {
  id: string;
  name: string;
  target: string;
  scanType: 'network' | 'web' | 'database' | 'infrastructure';
  status: 'pending' | 'running' | 'completed' | 'failed';
  progress: number;
  startTime: string;
  endTime?: string;
  vulnerabilitiesFound: number;
}

const VulnerabilityManagement: React.FC = () => {
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([]);
  const [scanJobs, setScanJobs] = useState<ScanJob[]>([]);
  const [loading, setLoading] = useState(false);
  const [modalVisible, setModalVisible] = useState(false);
  const [scanModalVisible, setScanModalVisible] = useState(false);
  const [selectedVuln, setSelectedVuln] = useState<Vulnerability | null>(null);
  const [form] = Form.useForm();

  useEffect(() => {
    loadVulnerabilities();
    loadScanJobs();
  }, []);

  const loadVulnerabilities = async () => {
    setLoading(true);
    try {
      // 模拟API调用
      setTimeout(() => {
        setVulnerabilities([
          {
            id: '1',
            title: 'SQL注入漏洞',
            severity: 'critical',
            cvssScore: 9.8,
            category: 'Web应用',
            affectedAsset: 'web-server-01',
            status: 'open',
            discoveredAt: '2024-01-15 10:30:00',
            description: '在用户登录页面发现SQL注入漏洞，攻击者可能获取敏感数据',
            solution: '使用参数化查询，验证输入数据'
          },
          {
            id: '2',
            title: '跨站脚本攻击(XSS)',
            severity: 'high',
            cvssScore: 7.4,
            category: 'Web应用',
            affectedAsset: 'web-server-02',
            status: 'in_progress',
            discoveredAt: '2024-01-14 15:20:00',
            description: '反射型XSS漏洞，可能导致用户会话劫持',
            solution: '对用户输入进行HTML编码，使用CSP策略'
          },
          {
            id: '3',
            title: '弱密码策略',
            severity: 'medium',
            cvssScore: 5.3,
            category: '身份验证',
            affectedAsset: 'auth-service',
            status: 'resolved',
            discoveredAt: '2024-01-13 09:15:00',
            description: '系统允许使用弱密码，增加暴力破解风险',
            solution: '实施强密码策略，要求复杂密码'
          }
        ]);
        setLoading(false);
      }, 1000);
    } catch (error) {
      console.error('Failed to load vulnerabilities:', error);
      setLoading(false);
    }
  };

  const loadScanJobs = async () => {
    try {
      // 模拟API调用
      setTimeout(() => {
        setScanJobs([
          {
            id: '1',
            name: '生产环境Web扫描',
            target: '192.168.1.0/24',
            scanType: 'web',
            status: 'completed',
            progress: 100,
            startTime: '2024-01-15 08:00:00',
            endTime: '2024-01-15 10:30:00',
            vulnerabilitiesFound: 5
          },
          {
            id: '2',
            name: '网络基础设施扫描',
            target: '10.0.0.0/16',
            scanType: 'network',
            status: 'running',
            progress: 65,
            startTime: '2024-01-15 14:00:00',
            vulnerabilitiesFound: 2
          },
          {
            id: '3',
            name: '数据库安全扫描',
            target: 'db-cluster-01',
            scanType: 'database',
            status: 'pending',
            progress: 0,
            startTime: '2024-01-15 16:00:00',
            vulnerabilitiesFound: 0
          }
        ]);
      }, 500);
    } catch (error) {
      console.error('Failed to load scan jobs:', error);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'red';
      case 'high': return 'orange';
      case 'medium': return 'yellow';
      case 'low': return 'blue';
      default: return 'default';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'red';
      case 'in_progress': return 'orange';
      case 'resolved': return 'green';
      case 'accepted_risk': return 'gray';
      default: return 'default';
    }
  };

  const getScanStatusColor = (status: string) => {
    switch (status) {
      case 'pending': return 'blue';
      case 'running': return 'orange';
      case 'completed': return 'green';
      case 'failed': return 'red';
      default: return 'default';
    }
  };

  const vulnerabilityColumns: ColumnsType<Vulnerability> = [
    {
      title: '漏洞标题',
      dataIndex: 'title',
      key: 'title',
    },
    {
      title: '严重程度',
      dataIndex: 'severity',
      key: 'severity',
      render: (severity, record) => (
        <Space>
          <Tag color={getSeverityColor(severity)}>
            {severity.toUpperCase()}
          </Tag>
          <span>CVSS: {record.cvssScore}</span>
        </Space>
      ),
    },
    {
      title: '类别',
      dataIndex: 'category',
      key: 'category',
    },
    {
      title: '受影响资产',
      dataIndex: 'affectedAsset',
      key: 'affectedAsset',
    },
    {
      title: '状态',
      dataIndex: 'status',
      key: 'status',
      render: (status) => (
        <Tag color={getStatusColor(status)}>
          {status === 'open' ? '待处理' :
           status === 'in_progress' ? '处理中' :
           status === 'resolved' ? '已解决' : '接受风险'}
        </Tag>
      ),
    },
    {
      title: '发现时间',
      dataIndex: 'discoveredAt',
      key: 'discoveredAt',
    },
    {
      title: '操作',
      key: 'action',
      render: (_, record) => (
        <Space size="middle">
          <Button 
            type="link" 
            icon={<EyeOutlined />}
            onClick={() => {
              setSelectedVuln(record);
              setModalVisible(true);
            }}
          >
            查看详情
          </Button>
        </Space>
      ),
    },
  ];

  const scanJobColumns: ColumnsType<ScanJob> = [
    {
      title: '扫描任务',
      dataIndex: 'name',
      key: 'name',
    },
    {
      title: '扫描目标',
      dataIndex: 'target',
      key: 'target',
    },
    {
      title: '扫描类型',
      dataIndex: 'scanType',
      key: 'scanType',
      render: (type) => (
        <Tag>
          {type === 'network' ? '网络扫描' :
           type === 'web' ? 'Web扫描' :
           type === 'database' ? '数据库扫描' : '基础设施扫描'}
        </Tag>
      ),
    },
    {
      title: '状态',
      dataIndex: 'status',
      key: 'status',
      render: (status, record) => (
        <Space direction="vertical" size="small">
          <Tag color={getScanStatusColor(status)}>
            {status === 'pending' ? '等待中' :
             status === 'running' ? '运行中' :
             status === 'completed' ? '已完成' : '失败'}
          </Tag>
          {status === 'running' && (
            <Progress percent={record.progress} size="small" />
          )}
        </Space>
      ),
    },
    {
      title: '发现漏洞',
      dataIndex: 'vulnerabilitiesFound',
      key: 'vulnerabilitiesFound',
      render: (count) => (
        <Tag color={count > 0 ? 'red' : 'green'}>
          {count} 个
        </Tag>
      ),
    },
    {
      title: '开始时间',
      dataIndex: 'startTime',
      key: 'startTime',
    },
    {
      title: '操作',
      key: 'action',
      render: (_, record) => (
        <Space size="middle">
          <Button type="link" size="small">查看报告</Button>
          {record.status === 'pending' && (
            <Button type="link" size="small" icon={<PlayCircleOutlined />}>
              开始扫描
            </Button>
          )}
        </Space>
      ),
    },
  ];

  const handleStartScan = (values: any) => {
    console.log('Starting scan with values:', values);
    setScanModalVisible(false);
    form.resetFields();
    // 这里会调用API启动扫描
  };

  return (
    <div>
      {/* 漏洞管理统计 */}
      <Row gutter={[16, 16]} style={{ marginBottom: 24 }}>
        <Col xs={24} sm={6}>
          <Card>
            <Statistic
              title="严重漏洞"
              value={3}
              prefix={<ExclamationCircleOutlined style={{ color: '#ff4d4f' }} />}
              valueStyle={{ color: '#ff4d4f' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={6}>
          <Card>
            <Statistic
              title="高危漏洞"
              value={8}
              prefix={<BugOutlined style={{ color: '#fa8c16' }} />}
              valueStyle={{ color: '#fa8c16' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={6}>
          <Card>
            <Statistic
              title="已修复"
              value={25}
              prefix={<CheckCircleOutlined style={{ color: '#52c41a' }} />}
              valueStyle={{ color: '#52c41a' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={6}>
          <Card>
            <Statistic
              title="扫描任务"
              value={12}
              prefix={<ScanOutlined style={{ color: '#1890ff' }} />}
              valueStyle={{ color: '#1890ff' }}
            />
          </Card>
        </Col>
      </Row>

      <Tabs 
        defaultActiveKey="vulnerabilities"
        items={[
          {
            key: 'vulnerabilities',
            label: '漏洞列表',
            children: (
              <Card 
                title="漏洞管理" 
                extra={
                  <Space>
                    <Button type="primary" onClick={loadVulnerabilities}>
                      刷新
                    </Button>
                    <Button>导出报告</Button>
                  </Space>
                }
              >
                <Table
                  columns={vulnerabilityColumns}
                  dataSource={vulnerabilities}
                  rowKey="id"
                  loading={loading}
                  pagination={{
                    pageSize: 10,
                    showSizeChanger: true,
                    showQuickJumper: true,
                    showTotal: (total) => `共 ${total} 条记录`,
                  }}
                />
              </Card>
            )
          },
          {
            key: 'scans',
            label: '扫描任务',
            children: (
              <Card 
                title="扫描任务" 
                extra={
                  <Space>
                    <Button 
                      type="primary" 
                      icon={<ScanOutlined />}
                      onClick={() => setScanModalVisible(true)}
                    >
                      新建扫描
                    </Button>
                    <Button onClick={loadScanJobs}>刷新</Button>
                  </Space>
                }
              >
                <Table
                  columns={scanJobColumns}
                  dataSource={scanJobs}
                  rowKey="id"
                  pagination={{
                    pageSize: 10,
                    showSizeChanger: true,
                    showQuickJumper: true,
                    showTotal: (total) => `共 ${total} 条记录`,
                  }}
                />
              </Card>
            )
          }
        ]}
      />

      {/* 漏洞详情模态框 */}
      <Modal
        title="漏洞详情"
        open={modalVisible}
        onCancel={() => setModalVisible(false)}
        footer={[
          <Button key="close" onClick={() => setModalVisible(false)}>
            关闭
          </Button>,
          <Button key="fix" type="primary">
            标记为已修复
          </Button>,
        ]}
        width={800}
      >
        {selectedVuln && (
          <div>
            <Descriptions bordered column={2}>
              <Descriptions.Item label="漏洞标题" span={2}>
                {selectedVuln.title}
              </Descriptions.Item>
              <Descriptions.Item label="严重程度">
                <Tag color={getSeverityColor(selectedVuln.severity)}>
                  {selectedVuln.severity.toUpperCase()}
                </Tag>
              </Descriptions.Item>
              <Descriptions.Item label="CVSS评分">
                {selectedVuln.cvssScore}
              </Descriptions.Item>
              <Descriptions.Item label="类别">
                {selectedVuln.category}
              </Descriptions.Item>
              <Descriptions.Item label="受影响资产">
                {selectedVuln.affectedAsset}
              </Descriptions.Item>
              <Descriptions.Item label="状态">
                <Tag color={getStatusColor(selectedVuln.status)}>
                  {selectedVuln.status === 'open' ? '待处理' :
                   selectedVuln.status === 'in_progress' ? '处理中' :
                   selectedVuln.status === 'resolved' ? '已解决' : '接受风险'}
                </Tag>
              </Descriptions.Item>
              <Descriptions.Item label="发现时间">
                {selectedVuln.discoveredAt}
              </Descriptions.Item>
              <Descriptions.Item label="漏洞描述" span={2}>
                {selectedVuln.description}
              </Descriptions.Item>
              <Descriptions.Item label="修复建议" span={2}>
                {selectedVuln.solution}
              </Descriptions.Item>
            </Descriptions>
          </div>
        )}
      </Modal>

      {/* 新建扫描模态框 */}
      <Modal
        title="新建扫描任务"
        open={scanModalVisible}
        onCancel={() => setScanModalVisible(false)}
        onOk={() => form.submit()}
        width={600}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleStartScan}
        >
          <Form.Item
            name="name"
            label="任务名称"
            rules={[{ required: true, message: '请输入任务名称' }]}
          >
            <Input placeholder="请输入扫描任务名称" />
          </Form.Item>
          
          <Form.Item
            name="scanType"
            label="扫描类型"
            rules={[{ required: true, message: '请选择扫描类型' }]}
          >
            <Select placeholder="请选择扫描类型">
              <Option value="network">网络扫描</Option>
              <Option value="web">Web应用扫描</Option>
              <Option value="database">数据库扫描</Option>
              <Option value="infrastructure">基础设施扫描</Option>
            </Select>
          </Form.Item>

          <Form.Item
            name="target"
            label="扫描目标"
            rules={[{ required: true, message: '请输入扫描目标' }]}
          >
            <Input placeholder="IP地址、域名或IP段" />
          </Form.Item>

          <Form.Item
            name="description"
            label="描述"
          >
            <Input.TextArea rows={3} placeholder="扫描任务描述（可选）" />
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default VulnerabilityManagement;