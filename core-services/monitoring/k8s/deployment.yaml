# 太上老君监控系统 Kubernetes Deployment 配置

apiVersion: apps/v1
kind: Deployment
metadata:
  name: taishanglaojun-monitoring
  namespace: taishanglaojun-monitoring
  labels:
    app.kubernetes.io/name: taishanglaojun-monitoring
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: taishanglaojun
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: kubectl
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: taishanglaojun-monitoring
      app.kubernetes.io/component: monitoring
  template:
    metadata:
      labels:
        app.kubernetes.io/name: taishanglaojun-monitoring
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/part-of: taishanglaojun
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
        config.checksum: "{{ include (print $.Template.BasePath \"/configmap.yaml\") . | sha256sum }}"
    spec:
      serviceAccountName: taishanglaojun-monitoring
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
        - name: monitoring
          image: taishanglaojun/monitoring:1.0.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: MONITORING_SERVICE_ENVIRONMENT
              value: "production"
            - name: MONITORING_SERVICE_LOG_LEVEL
              value: "info"
            - name: MONITORING_CONFIG_FILE
              value: "/etc/monitoring/monitoring.yaml"
            - name: INFLUXDB_TOKEN
              valueFrom:
                secretKeyRef:
                  name: taishanglaojun-monitoring-secrets
                  key: influxdb-token
            - name: SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: taishanglaojun-monitoring-secrets
                  key: smtp-password
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: taishanglaojun-monitoring-secrets
                  key: jwt-secret
          volumeMounts:
            - name: config
              mountPath: /etc/monitoring
              readOnly: true
            - name: logs
              mountPath: /var/log/monitoring
            - name: data
              mountPath: /var/lib/monitoring
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 30
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
      volumes:
        - name: config
          configMap:
            name: taishanglaojun-monitoring-config
            defaultMode: 0644
        - name: logs
          emptyDir: {}
        - name: data
          persistentVolumeClaim:
            claimName: taishanglaojun-monitoring-data
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app.kubernetes.io/name
                      operator: In
                      values:
                        - taishanglaojun-monitoring
                topologyKey: kubernetes.io/hostname
      tolerations:
        - key: "monitoring"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"

---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: taishanglaojun-monitoring
  labels:
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: taishanglaojun
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: prometheus
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/part-of: taishanglaojun
    spec:
      serviceAccountName: prometheus
      containers:
        - name: prometheus
          image: prom/prometheus:v2.47.0
          ports:
            - name: http
              containerPort: 9090
          args:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--storage.tsdb.retention.time=200h'
            - '--web.enable-lifecycle'
            - '--web.enable-admin-api'
          volumeMounts:
            - name: config
              mountPath: /etc/prometheus
              readOnly: true
            - name: storage
              mountPath: /prometheus
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: http
            initialDelaySeconds: 30
            periodSeconds: 15
          readinessProbe:
            httpGet:
              path: /-/ready
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            requests:
              cpu: 200m
              memory: 512Mi
            limits:
              cpu: 1000m
              memory: 2Gi
      volumes:
        - name: config
          configMap:
            name: prometheus-config
        - name: storage
          persistentVolumeClaim:
            claimName: prometheus-storage

---
# Grafana Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: taishanglaojun-monitoring
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/component: visualization
    app.kubernetes.io/part-of: taishanglaojun
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/component: visualization
        app.kubernetes.io/part-of: taishanglaojun
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:10.1.0
          ports:
            - name: http
              containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: admin-username
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: admin-password
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
            - name: GF_INSTALL_PLUGINS
              value: "grafana-piechart-panel,grafana-worldmap-panel"
          volumeMounts:
            - name: storage
              mountPath: /var/lib/grafana
            - name: datasources
              mountPath: /etc/grafana/provisioning/datasources
              readOnly: true
            - name: dashboards-config
              mountPath: /etc/grafana/provisioning/dashboards
              readOnly: true
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: grafana-storage
        - name: datasources
          configMap:
            name: grafana-datasources
        - name: dashboards-config
          configMap:
            name: grafana-dashboards-config

---
# InfluxDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: influxdb
  namespace: taishanglaojun-monitoring
  labels:
    app.kubernetes.io/name: influxdb
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: taishanglaojun
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: influxdb
  template:
    metadata:
      labels:
        app.kubernetes.io/name: influxdb
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: taishanglaojun
    spec:
      containers:
        - name: influxdb
          image: influxdb:2.7
          ports:
            - name: http
              containerPort: 8086
          env:
            - name: DOCKER_INFLUXDB_INIT_MODE
              value: "setup"
            - name: DOCKER_INFLUXDB_INIT_USERNAME
              valueFrom:
                secretKeyRef:
                  name: influxdb-secrets
                  key: admin-username
            - name: DOCKER_INFLUXDB_INIT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: influxdb-secrets
                  key: admin-password
            - name: DOCKER_INFLUXDB_INIT_ORG
              value: "taishanglaojun"
            - name: DOCKER_INFLUXDB_INIT_BUCKET
              value: "monitoring"
            - name: DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
              valueFrom:
                secretKeyRef:
                  name: influxdb-secrets
                  key: admin-token
          volumeMounts:
            - name: storage
              mountPath: /var/lib/influxdb2
            - name: config
              mountPath: /etc/influxdb2
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 1000m
              memory: 1Gi
      volumes:
        - name: storage
          persistentVolumeClaim:
            claimName: influxdb-storage
        - name: config
          emptyDir: {}