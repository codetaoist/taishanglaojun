# 太上老君监控系统 - 预发布环境配置

# 全局配置
global:
  imageRegistry: "ghcr.io"
  imagePullSecrets:
    - name: ghcr-secret

# 应用配置
replicaCount: 2

image:
  repository: taishanglaojun/monitoring
  pullPolicy: Always
  tag: "staging"

# 服务配置
service:
  type: ClusterIP
  port: 8080
  targetPort: 8080

# Ingress 配置
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-staging
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
  hosts:
    - host: monitoring-staging.taishanglaojun.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: monitoring-staging-tls
      hosts:
        - monitoring-staging.taishanglaojun.com

# 资源限制
resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 250m
    memory: 512Mi

# 自动扩缩容
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 5
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

# Pod 反亲和性
podAntiAffinity:
  enabled: true
  type: soft

# 存活探针
livenessProbe:
  enabled: true
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

# 就绪探针
readinessProbe:
  enabled: true
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# 启动探针
startupProbe:
  enabled: true
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 30

# 持久化存储
persistence:
  enabled: true
  storageClass: "fast-ssd"
  accessMode: ReadWriteOnce
  size: 10Gi

# 环境变量
env:
  - name: APP_ENV
    value: "staging"
  - name: LOG_LEVEL
    value: "info"
  - name: PORT
    value: "8080"
  - name: DEBUG
    value: "false"

# 数据库配置
database:
  enabled: true
  type: postgresql
  host: "postgres-staging.internal"
  port: 5432
  name: taishanglaojun_monitoring_staging
  user: monitoring_user
  password: ""  # 从 Secret 读取
  sslMode: require
  maxOpenConns: 20
  maxIdleConns: 5
  connMaxLifetime: 300s

# Redis 配置
redis:
  enabled: true
  host: "redis-staging.internal"
  port: 6379
  db: 0
  password: ""  # 从 Secret 读取
  maxRetries: 3
  poolSize: 10
  minIdleConns: 5

# 监控配置
monitoring:
  enabled: true
  logLevel: info
  debug: false
  metricsEnabled: true
  metricsPath: /metrics
  tracingEnabled: true
  tracingEndpoint: "http://jaeger-collector.monitoring:14268/api/traces"
  healthCheckPath: /health
  readinessCheckPath: /ready

# 安全配置
security:
  jwt:
    secret: ""  # 从 Secret 读取
    expiration: 24h
  encryption:
    key: ""  # 从 Secret 读取
  cors:
    enabled: true
    allowedOrigins: 
      - "https://staging.taishanglaojun.com"
      - "https://monitoring-staging.taishanglaojun.com"
    allowedMethods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    allowedHeaders: ["Authorization", "Content-Type", "X-Requested-With"]

# 告警配置
alerting:
  enabled: true
  webhookUrl: "https://hooks.slack.com/services/staging/webhook"
  slackChannel: "#monitoring-staging"
  emailRecipients:
    - "dev-team@taishanglaojun.com"

# 备份配置
backup:
  enabled: true
  schedule: "0 3 * * *"
  retention: 7
  storage:
    type: s3
    bucket: "taishanglaojun-staging-backups"
    region: "us-west-2"

# 服务监控器
serviceMonitor:
  enabled: true
  namespace: "monitoring"
  labels:
    release: prometheus
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics
  scheme: http

# Pod 监控器
podMonitor:
  enabled: true
  namespace: "monitoring"
  labels:
    release: prometheus
  interval: 30s
  scrapeTimeout: 10s
  path: /metrics
  scheme: http

# 网络策略
networkPolicy:
  enabled: true
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              name: ingress-nginx
      ports:
        - protocol: TCP
          port: 8080
    - from:
        - namespaceSelector:
            matchLabels:
              name: monitoring
      ports:
        - protocol: TCP
          port: 9090
  egress:
    - to: []
      ports:
        - protocol: TCP
          port: 5432  # PostgreSQL
        - protocol: TCP
          port: 6379  # Redis
        - protocol: TCP
          port: 53    # DNS
        - protocol: UDP
          port: 53    # DNS
        - protocol: TCP
          port: 443   # HTTPS
        - protocol: TCP
          port: 80    # HTTP

# Pod 中断预算
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# 依赖服务配置
postgresql:
  enabled: false  # 使用外部数据库

redis:
  enabled: false  # 使用外部 Redis

prometheus:
  enabled: true
  server:
    persistentVolume:
      enabled: true
      size: 20Gi
      storageClass: "fast-ssd"
    retention: "15d"
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 500m
        memory: 1Gi

grafana:
  enabled: true
  persistence:
    enabled: true
    size: 5Gi
    storageClass: "fast-ssd"
  adminPassword: ""  # 从 Secret 读取
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

jaeger:
  enabled: true
  storage:
    type: elasticsearch
    elasticsearch:
      host: "elasticsearch.monitoring"
      port: 9200

elasticsearch:
  enabled: true
  volumeClaimTemplate:
    resources:
      requests:
        storage: 30Gi
    storageClassName: "fast-ssd"
  resources:
    limits:
      cpu: 1000m
      memory: 2Gi
    requests:
      cpu: 500m
      memory: 1Gi

kibana:
  enabled: true
  resources:
    limits:
      cpu: 500m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi