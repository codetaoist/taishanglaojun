# Taishang Laojun AI Platform - Helm Values
# 太上老君AI平台 - Helm配置值

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  
# Environment configuration
environment: staging
region: us-west-2
domain: taishanglaojun.ai

# Image configuration
image:
  registry: docker.io
  repository: taishanglaojun
  tag: "latest"
  pullPolicy: IfNotPresent

# Frontend configuration
frontend:
  enabled: true
  name: frontend
  replicaCount: 2
  image:
    repository: taishanglaojun/frontend
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 80
    targetPort: 80
  
  ingress:
    enabled: true
    className: nginx
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: "10m"
      nginx.ingress.kubernetes.io/configuration-snippet: |
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; media-src 'self'; object-src 'none'; child-src 'none'; worker-src 'self'; frame-ancestors 'self'; form-action 'self'; base-uri 'self';" always;
    hosts:
      - host: "{{ .Values.domain }}"
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: frontend-tls
        hosts:
          - "{{ .Values.domain }}"
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# Backend configuration
backend:
  enabled: true
  name: backend
  replicaCount: 3
  image:
    repository: taishanglaojun/backend
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
  
  ingress:
    enabled: true
    className: nginx
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: "50m"
      nginx.ingress.kubernetes.io/rate-limit: "100"
      nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    hosts:
      - host: "api.{{ .Values.domain }}"
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: backend-tls
        hosts:
          - "api.{{ .Values.domain }}"
  
  env:
    - name: PORT
      value: "8080"
    - name: ENVIRONMENT
      value: "{{ .Values.environment }}"
    - name: LOG_LEVEL
      value: "info"
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: app-secrets
          key: database-url
    - name: REDIS_URL
      valueFrom:
        secretKeyRef:
          name: app-secrets
          key: redis-url
    - name: JWT_SECRET
      valueFrom:
        secretKeyRef:
          name: app-secrets
          key: jwt-secret
    - name: OPENAI_API_KEY
      valueFrom:
        secretKeyRef:
          name: app-secrets
          key: openai-api-key
    - name: SENTRY_DSN
      valueFrom:
        secretKeyRef:
          name: app-secrets
          key: sentry-dsn
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 256Mi
  
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
  
  nodeSelector: {}
  tolerations: []
  affinity: {}
  
  livenessProbe:
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 10
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# API Gateway configuration
apiGateway:
  enabled: true
  name: api-gateway
  replicaCount: 2
  image:
    repository: taishanglaojun/api-gateway
    tag: "latest"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
  
  ingress:
    enabled: true
    className: nginx
    annotations:
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-body-size: "100m"
      nginx.ingress.kubernetes.io/rate-limit: "1000"
      nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    hosts:
      - host: "gateway.{{ .Values.domain }}"
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: gateway-tls
        hosts:
          - "gateway.{{ .Values.domain }}"
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 128Mi
  
  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

# Database configuration
postgresql:
  enabled: false  # Using external RDS
  auth:
    postgresPassword: ""
    username: ""
    password: ""
    database: ""

# Redis configuration
redis:
  enabled: false  # Using external ElastiCache
  auth:
    enabled: true
    password: ""

# Ingress configuration
ingress:
  enabled: true
  className: nginx
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"

# Certificate Manager
certManager:
  enabled: true
  installCRDs: true

# Monitoring configuration
monitoring:
  enabled: true
  
  prometheus:
    enabled: true
    server:
      persistentVolume:
        enabled: true
        size: 20Gi
    alertmanager:
      enabled: true
      persistentVolume:
        enabled: true
        size: 2Gi
  
  grafana:
    enabled: true
    adminPassword: "admin123"
    persistence:
      enabled: true
      size: 10Gi
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
    dashboards:
      default:
        kubernetes-cluster:
          gnetId: 7249
          revision: 1
          datasource: Prometheus
        kubernetes-pods:
          gnetId: 6417
          revision: 1
          datasource: Prometheus

# Tracing configuration
tracing:
  enabled: true
  jaeger:
    enabled: true
    storage:
      type: memory

# Logging configuration
logging:
  enabled: true
  fluentd:
    enabled: true
  elasticsearch:
    enabled: true
  kibana:
    enabled: true

# Security configuration
security:
  networkPolicies:
    enabled: true
  podSecurityPolicies:
    enabled: true
  rbac:
    enabled: true

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"
  retention: "30d"

# Service Mesh (Istio)
serviceMesh:
  enabled: false
  istio:
    enabled: false

# External services configuration
externalServices:
  database:
    host: ""
    port: 5432
    name: ""
    username: ""
    password: ""
  
  redis:
    host: ""
    port: 6379
    password: ""
  
  s3:
    bucket: ""
    region: ""
    accessKey: ""
    secretKey: ""

# Secrets configuration
secrets:
  create: true
  name: app-secrets
  data:
    database-url: ""
    redis-url: ""
    jwt-secret: ""
    openai-api-key: ""
    sentry-dsn: ""
    stripe-api-key: ""
    sendgrid-api-key: ""

# ConfigMaps
configMaps:
  app-config:
    data:
      app.yaml: |
        app:
          name: "Taishang Laojun AI Platform"
          version: "1.0.0"
          environment: "{{ .Values.environment }}"
        
        server:
          port: 8080
          timeout: 30s
        
        database:
          max_connections: 100
          connection_timeout: 30s
        
        redis:
          max_connections: 100
          connection_timeout: 10s
        
        ai:
          model: "gpt-4"
          max_tokens: 4096
          temperature: 0.7

# Resource quotas
resourceQuota:
  enabled: true
  hard:
    requests.cpu: "4"
    requests.memory: 8Gi
    limits.cpu: "8"
    limits.memory: 16Gi
    persistentvolumeclaims: "10"

# Limit ranges
limitRange:
  enabled: true
  limits:
    - default:
        cpu: 500m
        memory: 512Mi
      defaultRequest:
        cpu: 100m
        memory: 128Mi
      type: Container

# Pod Disruption Budgets
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Node affinity and tolerations
nodeAffinity:
  enabled: false
  requiredDuringSchedulingIgnoredDuringExecution:
    nodeSelectorTerms:
    - matchExpressions:
      - key: kubernetes.io/arch
        operator: In
        values:
        - amd64

# Pod anti-affinity
podAntiAffinity:
  enabled: true
  preferredDuringSchedulingIgnoredDuringExecution:
  - weight: 100
    podAffinityTerm:
      labelSelector:
        matchExpressions:
        - key: app.kubernetes.io/name
          operator: In
          values:
          - taishang-laojun
      topologyKey: kubernetes.io/hostname