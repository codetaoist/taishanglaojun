# 太上老君监控系统 Helm Chart 默认配置

# 全局配置
global:
  # 镜像仓库配置
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  
  # 标签和注解
  commonLabels: {}
  commonAnnotations: {}
  
  # 集群域名
  clusterDomain: cluster.local
  
  # 兼容性
  compatibility:
    openshift:
      adaptSecurityContext: auto

# 主应用配置
app:
  # 镜像配置
  image:
    registry: docker.io
    repository: taishanglaojun/monitoring
    tag: "1.0.0"
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
  
  # 副本数配置
  replicaCount: 3
  
  # 更新策略
  updateStrategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  
  # Pod 配置
  podLabels: {}
  podAnnotations: {}
  podSecurityContext:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    fsGroup: 1001
  
  # 容器配置
  containerSecurityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
  
  # 资源配置
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 1000m
      memory: 1Gi
  
  # 健康检查
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
  
  readinessProbe:
    enabled: true
    httpGet:
      path: /ready
      port: http
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3
  
  startupProbe:
    enabled: true
    httpGet:
      path: /health
      port: http
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
  
  # 环境变量
  env:
    - name: MONITORING_SERVICE_ENVIRONMENT
      value: "production"
    - name: MONITORING_SERVICE_LOG_LEVEL
      value: "info"
  
  # 配置文件
  config:
    monitoring.yaml: |
      service:
        name: "taishanglaojun-monitoring"
        version: "1.0.0"
        environment: "production"
        port: 8080
        log_level: "info"
      
      tracing:
        enabled: true
        sampling_rate: 0.1
        batch_timeout: "1s"
        batch_count: 512
        exporters:
          console:
            enabled: false
          jaeger:
            enabled: true
            endpoint: "http://jaeger:14268/api/traces"
      
      logging:
        level: "info"
        format: "json"
        output: "stdout"
      
      storage:
        prometheus:
          enabled: true
          url: "http://prometheus:9090"
        influxdb:
          enabled: true
          url: "http://influxdb:8086"
          database: "monitoring"
          organization: "taishanglaojun"
      
      alerting:
        enabled: true
        rules_path: "/etc/monitoring/rules"
        webhook_url: "http://alertmanager:9093/api/v1/alerts"
      
      dashboard:
        enabled: true
        grafana_url: "http://grafana:3000"
      
      performance:
        enabled: true
        profiling_enabled: true
        metrics_enabled: true
      
      automation:
        enabled: true
        auto_scaling: true
        self_healing: true

# 服务配置
service:
  type: ClusterIP
  port: 8080
  targetPort: http
  annotations: {}
  labels: {}

# Ingress 配置
ingress:
  enabled: false
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
    - host: monitoring.taishanglaojun.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: taishanglaojun-monitoring-tls
      hosts:
        - monitoring.taishanglaojun.com

# 持久化存储
persistence:
  enabled: true
  storageClass: ""
  accessMode: ReadWriteOnce
  size: 10Gi
  annotations: {}

# 自动扩缩容
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 10
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60

# 节点选择器和容忍度
nodeSelector: {}
tolerations: []
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                  - taishanglaojun-monitoring
          topologyKey: kubernetes.io/hostname

# ServiceAccount
serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: true

# RBAC
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["configmaps", "secrets", "services", "endpoints", "pods"]
      verbs: ["get", "list", "watch"]
    - apiGroups: ["apps"]
      resources: ["deployments", "replicasets", "statefulsets"]
      verbs: ["get", "list", "watch"]

# 网络策略
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Pod 中断预算
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# 监控配置
monitoring:
  serviceMonitor:
    enabled: true
    namespace: ""
    labels: {}
    annotations: {}
    interval: 30s
    scrapeTimeout: 10s
    path: /metrics
    port: http

# Prometheus 配置
prometheus:
  enabled: true
  server:
    persistentVolume:
      enabled: true
      size: 50Gi
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
      limits:
        cpu: 1000m
        memory: 2Gi

# Grafana 配置
grafana:
  enabled: true
  persistence:
    enabled: true
    size: 5Gi
  adminPassword: "admin123"
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://prometheus:9090
          access: proxy
          isDefault: true
        - name: InfluxDB
          type: influxdb
          url: http://influxdb:8086
          access: proxy

# InfluxDB 配置
influxdb:
  enabled: true
  persistence:
    enabled: true
    size: 100Gi
  resources:
    requests:
      cpu: 200m
      memory: 256Mi
    limits:
      cpu: 1000m
      memory: 1Gi
  adminUser:
    organization: "taishanglaojun"
    bucket: "monitoring"
    user: "admin"
    password: "admin123"

# Jaeger 配置
jaeger:
  enabled: true
  storage:
    type: memory
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
    limits:
      cpu: 500m
      memory: 512Mi

# AlertManager 配置
alertmanager:
  enabled: true
  persistence:
    enabled: true
    size: 2Gi
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 200m
      memory: 256Mi

# Node Exporter 配置
nodeExporter:
  enabled: true
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 200m
      memory: 128Mi

# 额外的配置
extraDeploy: []
extraVolumes: []
extraVolumeMounts: []
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""

# 测试配置
tests:
  enabled: true
  image:
    registry: docker.io
    repository: busybox
    tag: "1.35"