package middleware

import (
	"bytes $args[0].Value -replace '\n\s*', '' encoding/json $args[0].Value -replace '\n\s*', '' net/http $args[0].Value -replace '\n\s*', '' net/http/httptest $args[0].Value -replace '\n\s*', '' strings $args[0].Value -replace '\n\s*', '' testing $args[0].Value -replace '\n\s*', '' time $args[0].Value -replace '\n\s*', '' github.com/gin-gonic/gin $args[0].Value -replace '\n\s*', '' github.com/stretchr/testify/assert $args[0].Value -replace '\n\s*', '' github.com/stretchr/testify/mock $args[0].Value -replace '\n\s*', '' github.com/stretchr/testify/suite $args[0].Value -replace '\n\s*', '' golang.org/x/time/rate $args[0].Value -replace '\n\s*', '' http://localhost:3000", "https://example.com $args[0].Value -replace '\n\s*', '' GET", "POST", "PUT", "DELETE $args[0].Value -replace '\n\s*', '' Content-Type", "Authorization $args[0].Value -replace '\n\s*', '' csrf_token $args[0].Value -replace '\n\s*', '' X-CSRF-Token $args[0].Value -replace '\n\s*', '' Strict $args[0].Value -replace '\n\s*', '' session_id $args[0].Value -replace '\n\s*', '' Strict $args[0].Value -replace '\n\s*', '' 127.0.0.1", "192.168.1.0/24 $args[0].Value -replace '\n\s*', '' 10.0.0.1", "172.16.0.0/16 $args[0].Value -replace '\n\s*', '' /test $args[0].Value -replace '\n\s*', '' message": "success $args[0].Value -replace '\n\s*', '' Normal request $args[0].Value -replace '\n\s*', '' /test $args[0].Value -replace '\n\s*', ''  $args[0].Value -replace '\n\s*', '' SQL injection attempt $args[0].Value -replace '\n\s*', '' /test $args[0].Value -replace '\n\s*', '' id=1' OR '1'='1 $args[0].Value -replace '\n\s*', '' XSS attempt $args[0].Value -replace '\n\s*', '' /test $args[0].Value -replace '\n\s*', '' name=<script>alert('xss')</script> $args[0].Value -replace '\n\s*', '' Path traversal attempt $args[0].Value -replace '\n\s*', '' /test $args[0].Value -replace '\n\s*', '' file=../../../etc/passwd $args[0].Value -replace '\n\s*', ''  $args[0].Value -replace '\n\s*', '' ? $args[0].Value -replace '\n\s*', '' GET $args[0].Value -replace '\n\s*', '' /test $args[0].Value -replace '\n\s*', '' message": "success $args[0].Value -replace '\n\s*', '' GET", "/test $args[0].Value -replace '\n\s*', '' 192.168.1.100:12345 $args[0].Value -replace '\n\s*', '' /test $args[0].Value -replace '\n\s*', '' message": "success $args[0].Value -replace '\n\s*', '' GET", "/test $args[0].Value -replace '\n\s*', '' nosniff", headers.Get("X-Content-Type-Options $args[0].Value -replace '\n\s*', '' DENY", headers.Get("X-Frame-Options $args[0].Value -replace '\n\s*', '' 1; mode=block", headers.Get("X-XSS-Protection $args[0].Value -replace '\n\s*', '' no-referrer", headers.Get("Referrer-Policy $args[0].Value -replace '\n\s*', '' Content-Security-Policy"), "default-src 'self' $args[0].Value -replace '\n\s*', '' Strict-Transport-Security"), "max-age=31536000 $args[0].Value -replace '\n\s*', '' /test $args[0].Value -replace '\n\s*', '' message": "success $args[0].Value -replace '\n\s*', '' Allowed origin $args[0].Value -replace '\n\s*', '' http://localhost:3000 $args[0].Value -replace '\n\s*', '' GET $args[0].Value -replace '\n\s*', '' Disallowed origin $args[0].Value -replace '\n\s*', '' http://malicious.com $args[0].Value -replace '\n\s*', '' GET $args[0].Value -replace '\n\s*', '' Preflight request $args[0].Value -replace '\n\s*', '' http://localhost:3000 $args[0].Value -replace '\n\s*', '' OPTIONS $args[0].Value -replace '\n\s*', '' /test $args[0].Value -replace '\n\s*', '' Origin $args[0].Value -replace '\n\s*', '' OPTIONS $args[0].Value -replace '\n\s*', '' Access-Control-Request-Method", "POST $args[0].Value -replace '\n\s*', ''  $args[0].Value -replace '\n\s*', '' Access-Control-Allow-Origin $args[0].Value -replace '\n\s*', '' /test $args[0].Value -replace '\n\s*', '' message": "success $args[0].Value -replace '\n\s*', '' Valid JSON $args[0].Value -replace '\n\s*', '' application/json $args[0].Value -replace '\n\s*', '' name": "test", "value $args[0].Value -replace '\n\s*', '' Invalid JSON $args[0].Value -replace '\n\s*', '' application/json $args[0].Value -replace '\n\s*', '' name": "test", "value $args[0].Value -replace '\n\s*', '' Malicious payload $args[0].Value -replace '\n\s*', '' application/json $args[0].Value -replace '\n\s*', '' script": "<script>alert('xss')</script> $args[0].Value -replace '\n\s*', '' SQL injection in JSON $args[0].Value -replace '\n\s*', '' application/json $args[0].Value -replace '\n\s*', '' id": "1' OR '1'='1 $args[0].Value -replace '\n\s*', '' POST", "/test $args[0].Value -replace '\n\s*', '' Content-Type $args[0].Value -replace '\n\s*', '' /test $args[0].Value -replace '\n\s*', '' message": "success $args[0].Value -replace '\n\s*', '' Whitelisted IP $args[0].Value -replace '\n\s*', '' 127.0.0.1:12345 $args[0].Value -replace '\n\s*', '' Whitelisted subnet $args[0].Value -replace '\n\s*', '' 192.168.1.100:12345 $args[0].Value -replace '\n\s*', '' Non-whitelisted IP $args[0].Value -replace '\n\s*', '' 10.0.0.100:12345 $args[0].Value -replace '\n\s*', '' GET", "/test $args[0].Value -replace '\n\s*', '' /test $args[0].Value -replace '\n\s*', '' message": "success $args[0].Value -replace '\n\s*', '' Normal IP $args[0].Value -replace '\n\s*', '' 192.168.1.100:12345 $args[0].Value -replace '\n\s*', '' Blacklisted IP $args[0].Value -replace '\n\s*', '' 10.0.0.1:12345 $args[0].Value -replace '\n\s*', '' Blacklisted subnet $args[0].Value -replace '\n\s*', '' 172.16.1.100:12345 $args[0].Value -replace '\n\s*', '' GET", "/test $args[0].Value -replace '\n\s*', '' /token $args[0].Value -replace '\n\s*', '' message": "token endpoint $args[0].Value -replace '\n\s*', '' /test $args[0].Value -replace '\n\s*', '' message": "success $args[0].Value -replace '\n\s*', '' GET", "/token $args[0].Value -replace '\n\s*', '' GET request (no CSRF needed) $args[0].Value -replace '\n\s*', '' GET $args[0].Value -replace '\n\s*', ''  $args[0].Value -replace '\n\s*', '' POST with valid CSRF token $args[0].Value -replace '\n\s*', '' POST $args[0].Value -replace '\n\s*', '' POST without CSRF token $args[0].Value -replace '\n\s*', '' POST $args[0].Value -replace '\n\s*', ''  $args[0].Value -replace '\n\s*', '' POST with invalid CSRF token $args[0].Value -replace '\n\s*', '' POST $args[0].Value -replace '\n\s*', '' invalid-token $args[0].Value -replace '\n\s*', '' GET $args[0].Value -replace '\n\s*', '' /token $args[0].Value -replace '\n\s*', '' /test $args[0].Value -replace '\n\s*', ''  $args[0].Value -replace '\n\s*', '' /test $args[0].Value -replace '\n\s*', '' message": "success $args[0].Value -replace '\n\s*', '' GET", "/test $args[0].Value -replace '\n\s*', '' /login $args[0].Value -replace '\n\s*', '' error": "invalid credentials $args[0].Value -replace '\n\s*', '' 192.168.1.100 $args[0].Value -replace '\n\s*', '' POST", "/login", strings.NewReader(`{"username":"test","password":"wrong $args[0].Value -replace '\n\s*', '' Content-Type", "application/json $args[0].Value -replace '\n\s*', '' :12345 $args[0].Value -replace '\n\s*', '' 192.168.1.100:12345 $args[0].Value -replace '\n\s*', '' 192.168.1.100 $args[0].Value -replace '\n\s*', '' 192.168.1.100", "192.168.1.0/24 $args[0].Value -replace '\n\s*', '' 10.0.0.1", "192.168.1.0/24 $args[0].Value -replace '\n\s*', '' SELECT * FROM users WHERE id = 1' OR '1'='1 $args[0].Value -replace '\n\s*', '' SELECT * FROM users WHERE id = 1 $args[0].Value -replace '\n\s*', '' /test $args[0].Value -replace '\n\s*', '' message": "success $args[0].Value -replace '\n\s*', '' GET", "/test?id=1 $args[0].Value -replace '\n\s*', '' /test $args[0].Value -replace '\n\s*', '' message": "success $args[0].Value -replace '\n\s*', '' GET", "/test $args[0].Value -replace '\n\s*', '' 192.168.1.100:12345 $args[0].Value -replace '\n\s*', '' /test $args[0].Value -replace '\n\s*', '' message": "success $args[0].Value -replace '\n\s*', '' name": "test", "value": 123, "description": "This is a test payload $args[0].Value -replace '\n\s*', '' POST", "/test $args[0].Value -replace '\n\s*', '' Content-Type", "application/json $args[0].Value -replace '\n\s*', '' test-session-123 $args[0].Value -replace '\n\s*', '' user-456 $args[0].Value -replace '\n\s*', '' 192.168.1.100 $args[0].Value -replace '\n\s*', '' Mozilla/5.0 Test Browser $args[0].Value -replace '\n\s*', '' test-session-123 $args[0].Value -replace '\n\s*', '' user-456 $args[0].Value -replace '\n\s*', '' 192.168.1.100 $args[0].Value -replace '\n\s*', '' 192.168.1.100 $args[0].Value -replace '\n\s*', '' testuser $args[0].Value -replace '\n\s*', '' 192.168.1.100 $args[0].Value -replace '\n\s*', '' testuser", attempt.Username)
	assert.False(t, attempt.Success)
	assert.NotZero(t, attempt.Timestamp)
}

