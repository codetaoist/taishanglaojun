# 太上老君监控系统 GitHub Actions CI/CD 工作流
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'release/*', 'hotfix/*' ]
    tags: [ 'v*' ]
    paths:
      - 'core-services/monitoring/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'core-services/monitoring/**'
  schedule:
    # 每天凌晨2点运行安全扫描
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      skip_tests:
        description: '跳过测试'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: '强制部署'
        required: false
        default: false
        type: boolean

env:
  # 项目配置
  PROJECT_NAME: taishanglaojun-monitoring
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  
  # 镜像配置
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/monitoring
  
  # 版本配置
  VERSION: ${{ github.ref_type == 'tag' && github.ref_name || github.sha }}
  
  # 构建配置
  PLATFORMS: linux/amd64,linux/arm64
  
  # 工作目录
  WORKING_DIRECTORY: core-services/monitoring

jobs:
  # 代码质量检查
  code-quality:
    name: 代码质量检查
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: core-services/monitoring/go.sum

      - name: 下载依赖
        working-directory: core-services/monitoring
        run: go mod download

      - name: 代码格式检查
        working-directory: core-services/monitoring
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "代码格式不符合规范:"
            gofmt -s -l .
            exit 1
          fi

      - name: 静态代码分析
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          working-directory: core-services/monitoring
          args: --timeout=5m

      - name: 安全扫描
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec.sarif ./...'
          working-directory: core-services/monitoring

      - name: 上传安全扫描结果
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: core-services/monitoring/gosec.sarif

  # 单元测试
  test:
    name: 单元测试
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Go 环境
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache-dependency-path: core-services/monitoring/go.sum

      - name: 下载依赖
        working-directory: core-services/monitoring
        run: go mod download

      - name: 运行测试
        working-directory: core-services/monitoring
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: 上传测试覆盖率
        uses: codecov/codecov-action@v3
        with:
          file: core-services/monitoring/coverage.out
          flags: monitoring
          name: monitoring-coverage

      - name: 上传测试报告
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-coverage
          path: core-services/monitoring/coverage.html

  # 构建 Docker 镜像
  build:
    name: 构建镜像
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 登录容器注册表
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 提取元数据
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 构建并推送镜像
        id: build
        uses: docker/build-push-action@v5
        with:
          context: core-services/monitoring
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            COMMIT_SHA=${{ github.sha }}
            BUILD_DATE=${{ steps.meta.outputs.created }}

  # Helm Chart 验证和打包
  helm:
    name: Helm Chart 验证
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: 添加 Helm 仓库
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo add grafana https://grafana.github.io/helm-charts
          helm repo add influxdata https://helm.influxdata.com/
          helm repo add jaegertracing https://jaegertracing.github.io/helm-charts
          helm repo update

      - name: Helm Chart 语法检查
        working-directory: core-services/monitoring/helm
        run: helm lint .

      - name: Helm Chart 模板渲染测试
        working-directory: core-services/monitoring/helm
        run: |
          helm template test . --debug --dry-run > /tmp/rendered.yaml
          echo "模板渲染成功，输出文件大小: $(wc -l < /tmp/rendered.yaml) 行"

      - name: 验证 Kubernetes 资源
        uses: instrumenta/kubeval-action@master
        with:
          files: /tmp/rendered.yaml

      - name: 打包 Helm Chart
        if: github.event_name != 'pull_request'
        working-directory: core-services/monitoring
        run: |
          helm package helm/ --destination ./charts/
          helm repo index ./charts/ --url https://charts.taishanglaojun.com

      - name: 上传 Helm Chart
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v3
        with:
          name: helm-chart
          path: core-services/monitoring/charts/

  # 安全扫描
  security:
    name: 安全扫描
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 运行 Trivy 漏洞扫描
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 上传 Trivy 扫描结果
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Kubernetes 配置安全扫描
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'core-services/monitoring/k8s'
          format: 'sarif'
          output: 'trivy-k8s-results.sarif'

      - name: 上传 K8s 配置扫描结果
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-k8s-results.sarif'

  # 部署到开发环境
  deploy-dev:
    name: 部署到开发环境
    runs-on: ubuntu-latest
    needs: [build, helm, security]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: development
      url: https://monitoring-dev.taishanglaojun.com
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: 设置 Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: 配置 Kubernetes 上下文
        run: |
          echo "${{ secrets.KUBE_CONFIG_DEV }}" | base64 -d > /tmp/kubeconfig
          export KUBECONFIG=/tmp/kubeconfig
          kubectl config current-context

      - name: 部署到开发环境
        env:
          KUBECONFIG: /tmp/kubeconfig
        run: |
          helm upgrade --install taishanglaojun-monitoring-dev \
            core-services/monitoring/helm/ \
            --namespace taishanglaojun-monitoring-dev \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set ingress.hosts[0].host=monitoring-dev.taishanglaojun.com \
            --set global.environment=development \
            --wait --timeout=10m

      - name: 运行部署后测试
        env:
          KUBECONFIG: /tmp/kubeconfig
        run: |
          helm test taishanglaojun-monitoring-dev -n taishanglaojun-monitoring-dev

  # 部署到生产环境
  deploy-prod:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: [build, helm, security]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: production
      url: https://monitoring.taishanglaojun.com
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: 设置 Helm
        uses: azure/setup-helm@v3
        with:
          version: '3.12.0'

      - name: 配置 Kubernetes 上下文
        run: |
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > /tmp/kubeconfig
          export KUBECONFIG=/tmp/kubeconfig
          kubectl config current-context

      - name: 部署到生产环境
        env:
          KUBECONFIG: /tmp/kubeconfig
        run: |
          helm upgrade --install taishanglaojun-monitoring \
            core-services/monitoring/helm/ \
            --namespace taishanglaojun-monitoring \
            --create-namespace \
            --set image.tag=${{ github.event.release.tag_name }} \
            --set ingress.hosts[0].host=monitoring.taishanglaojun.com \
            --set global.environment=production \
            --set autoscaling.enabled=true \
            --set persistence.enabled=true \
            --wait --timeout=15m

      - name: 运行生产环境测试
        env:
          KUBECONFIG: /tmp/kubeconfig
        run: |
          helm test taishanglaojun-monitoring -n taishanglaojun-monitoring

      - name: 发送部署通知
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow