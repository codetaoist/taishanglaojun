# 太上老君监控系统 Docker Compose 生产环境配置
# 用于生产环境部署

version: '3.8'

services:
  # ==================== 生产环境配置 ====================
  
  # 监控系统主应用 - 生产配置
  monitoring:
    image: ${REGISTRY:-ghcr.io}/taishanglaojun/monitoring:${VERSION:-latest}
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
        monitor: 60s
      rollback_config:
        parallelism: 1
        delay: 10s
        monitor: 60s
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      # 生产环境配置
      - MONITORING_SERVICE_ENVIRONMENT=production
      - MONITORING_SERVICE_LOG_LEVEL=info
      - MONITORING_SERVICE_DEBUG=false
      - MONITORING_SERVICE_HOT_RELOAD=false
      
      # 生产数据库配置
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_NAME=${DB_NAME:-taishanglaojun_monitoring}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSL_MODE=require
      - DB_MAX_CONNECTIONS=100
      - DB_LOG_QUERIES=false
      
      # 生产缓存配置
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_DB=0
      - REDIS_MAX_CONNECTIONS=100
      
      # 生产监控配置
      - PROMETHEUS_URL=${PROMETHEUS_URL:-http://prometheus:9090}
      - GRAFANA_URL=${GRAFANA_URL:-http://grafana:3000}
      - INFLUXDB_URL=${INFLUXDB_URL:-http://influxdb:8086}
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT:-http://jaeger:14268/api/traces}
      - ELASTICSEARCH_URL=${ELASTICSEARCH_URL:-http://elasticsearch:9200}
      
      # 生产安全配置
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - CORS_ALLOW_ALL=false
      - DISABLE_AUTH=false
      - JWT_EXPIRY=1h
      - ENABLE_PPROF=false
      - ENABLE_DEBUG_ENDPOINTS=false
      
      # 生产告警配置
      - ALERTMANAGER_URL=${ALERTMANAGER_URL:-http://alertmanager:9093}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - EMAIL_SMTP_HOST=${EMAIL_SMTP_HOST}
      - EMAIL_SMTP_PORT=${EMAIL_SMTP_PORT:-587}
      - EMAIL_SMTP_USER=${EMAIL_SMTP_USER}
      - EMAIL_SMTP_PASSWORD=${EMAIL_SMTP_PASSWORD}
    volumes:
      - monitoring_config:/app/config:ro
      - monitoring_logs:/var/log/monitoring
      - monitoring_data:/var/lib/monitoring
    networks:
      - monitoring-network
      - traefik-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      # Traefik 标签
      - "traefik.enable=true"
      - "traefik.http.routers.monitoring.rule=Host(`${MONITORING_DOMAIN:-monitoring.taishanglaojun.com}`)"
      - "traefik.http.routers.monitoring.tls=true"
      - "traefik.http.routers.monitoring.tls.certresolver=letsencrypt"
      - "traefik.http.services.monitoring.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.monitoring-auth.basicauth.users=${BASIC_AUTH_USERS}"
      - "traefik.http.routers.monitoring.middlewares=monitoring-auth"

  # PostgreSQL - 生产配置
  postgres:
    image: postgres:15-alpine
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    environment:
      - POSTGRES_DB=${DB_NAME:-taishanglaojun_monitoring}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
      - POSTGRES_LOG_STATEMENT=none
      - POSTGRES_LOG_MIN_DURATION_STATEMENT=1000
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_config:/etc/postgresql
      - postgres_logs:/var/log/postgresql
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - 生产配置
  redis:
    image: redis:7-alpine
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD}
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    volumes:
      - redis_data:/data
      - redis_config:/usr/local/etc/redis
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Prometheus - 生产配置
  prometheus:
    image: prom/prometheus:v2.47.0
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=50GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--log.level=info'
      - '--web.external-url=https://${PROMETHEUS_DOMAIN:-prometheus.taishanglaojun.com}'
    volumes:
      - prometheus_data:/prometheus
      - prometheus_config:/etc/prometheus
    networks:
      - monitoring-network
      - traefik-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      # Traefik 标签
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`${PROMETHEUS_DOMAIN:-prometheus.taishanglaojun.com}`)"
      - "traefik.http.routers.prometheus.tls=true"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # Grafana - 生产配置
  grafana:
    image: grafana/grafana:10.1.0
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_USERS_AUTO_ASSIGN_ORG_ROLE=Viewer
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-grafana.taishanglaojun.com}
      - GF_SERVER_ROOT_URL=https://${GRAFANA_DOMAIN:-grafana.taishanglaojun.com}
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=${DB_USER}
      - GF_DATABASE_PASSWORD=${DB_PASSWORD}
      - GF_DATABASE_SSL_MODE=require
      - GF_SESSION_PROVIDER=redis
      - GF_SESSION_PROVIDER_CONFIG=addr=redis:6379,pool_size=100,db=1,password=${REDIS_PASSWORD}
      - GF_LOG_LEVEL=info
    volumes:
      - grafana_data:/var/lib/grafana
      - grafana_config:/etc/grafana
    networks:
      - monitoring-network
      - traefik-network
    depends_on:
      - postgres
      - redis
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      # Traefik 标签
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`${GRAFANA_DOMAIN:-grafana.taishanglaojun.com}`)"
      - "traefik.http.routers.grafana.tls=true"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  # InfluxDB - 生产配置
  influxdb:
    image: influxdb:2.7-alpine
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.25'
          memory: 512M
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_ADMIN_USER:-admin}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_ADMIN_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG:-taishanglaojun}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET:-monitoring}
      - DOCKER_INFLUXDB_INIT_RETENTION=90d
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Jaeger - 生产配置
  jaeger:
    image: jaegertracing/all-in-one:1.50
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - ES_USERNAME=${ELASTICSEARCH_USERNAME:-elastic}
      - ES_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - ES_INDEX_PREFIX=jaeger
    networks:
      - monitoring-network
      - traefik-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:16686/"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      # Traefik 标签
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`${JAEGER_DOMAIN:-jaeger.taishanglaojun.com}`)"
      - "traefik.http.routers.jaeger.tls=true"
      - "traefik.http.routers.jaeger.tls.certresolver=letsencrypt"
      - "traefik.http.services.jaeger.loadbalancer.server.port=16686"

  # Elasticsearch - 生产配置
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - xpack.security.transport.ssl.enabled=false
      - xpack.security.http.ssl.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - elasticsearch_config:/usr/share/elasticsearch/config
      - elasticsearch_logs:/usr/share/elasticsearch/logs
    networks:
      - monitoring-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s -u elastic:${ELASTICSEARCH_PASSWORD} http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana - 生产配置
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 256M
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME:-elastic}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - SERVER_NAME=${KIBANA_DOMAIN:-kibana.taishanglaojun.com}
      - SERVER_HOST=0.0.0.0
      - SERVER_PUBLICBASEURL=https://${KIBANA_DOMAIN:-kibana.taishanglaojun.com}
    volumes:
      - kibana_config:/usr/share/kibana/config
      - kibana_data:/usr/share/kibana/data
    networks:
      - monitoring-network
      - traefik-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      # Traefik 标签
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`${KIBANA_DOMAIN:-kibana.taishanglaojun.com}`)"
      - "traefik.http.routers.kibana.tls=true"
      - "traefik.http.routers.kibana.tls.certresolver=letsencrypt"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"

  # AlertManager - 生产配置
  alertmanager:
    image: prom/alertmanager:v0.26.0
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.05'
          memory: 64M
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://${ALERTMANAGER_DOMAIN:-alertmanager.taishanglaojun.com}'
      - '--log.level=info'
      - '--cluster.listen-address=0.0.0.0:9094'
    volumes:
      - alertmanager_data:/alertmanager
      - alertmanager_config:/etc/alertmanager
    networks:
      - monitoring-network
      - traefik-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      # Traefik 标签
      - "traefik.enable=true"
      - "traefik.http.routers.alertmanager.rule=Host(`${ALERTMANAGER_DOMAIN:-alertmanager.taishanglaojun.com}`)"
      - "traefik.http.routers.alertmanager.tls=true"
      - "traefik.http.routers.alertmanager.tls.certresolver=letsencrypt"
      - "traefik.http.services.alertmanager.loadbalancer.server.port=9093"

# 生产环境网络
networks:
  monitoring-network:
    driver: overlay
    attachable: true
  traefik-network:
    external: true

# 生产环境数据卷
volumes:
  monitoring_config:
    driver: local
  monitoring_logs:
    driver: local
  monitoring_data:
    driver: local
  postgres_data:
    driver: local
  postgres_config:
    driver: local
  postgres_logs:
    driver: local
  redis_data:
    driver: local
  redis_config:
    driver: local
  prometheus_data:
    driver: local
  prometheus_config:
    driver: local
  grafana_data:
    driver: local
  grafana_config:
    driver: local
  influxdb_data:
    driver: local
  influxdb_config:
    driver: local
  elasticsearch_data:
    driver: local
  elasticsearch_config:
    driver: local
  elasticsearch_logs:
    driver: local
  kibana_config:
    driver: local
  kibana_data:
    driver: local
  alertmanager_data:
    driver: local
  alertmanager_config:
    driver: local