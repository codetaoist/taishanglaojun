apiVersion: v1
kind: ConfigMap
metadata:
  name: advanced-ai-config
  namespace: taishanglaojun
  labels:
    app: advanced-ai-service
    component: config
data:
  # 应用配置
  app.yaml: |
    server:
      host: "0.0.0.0"
      port: 8080
      read_timeout: "30s"
      write_timeout: "30s"
      idle_timeout: "60s"
      max_header_bytes: 1048576
    
    database:
      host: "postgres"
      port: 5432
      name: "taishanglaojun"
      user: "taishanglaojun"
      ssl_mode: "disable"
      max_open_conns: 25
      max_idle_conns: 5
      conn_max_lifetime: "300s"
    
    redis:
      host: "redis"
      port: 6379
      db: 0
      pool_size: 10
      min_idle_conns: 5
      dial_timeout: "5s"
      read_timeout: "3s"
      write_timeout: "3s"
      pool_timeout: "4s"
    
    jwt:
      expiry: "24h"
      refresh_expiry: "168h"
      issuer: "taishanglaojun-ai"
    
    cors:
      enabled: true
      origins: ["*"]
      methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
      headers: ["*"]
      credentials: true
    
    rate_limit:
      enabled: true
      requests: 1000
      window: "1h"
      burst: 100
    
    monitoring:
      enabled: true
      metrics_enabled: true
      health_check_interval: "30s"
      performance_monitoring: true
    
    logging:
      level: "info"
      format: "json"
      output: "stdout"
      file_enabled: true
      file_path: "/app/logs/app.log"
      max_size: 100
      max_backups: 3
      max_age: 28
      compress: true

  # AGI配置
  agi.yaml: |
    agi:
      enabled: true
      max_concurrent_tasks: 10
      task_timeout: "300s"
      cache_enabled: true
      cache_ttl: "3600s"
      
      capabilities:
        reasoning:
          enabled: true
          max_depth: 10
          timeout: "60s"
        planning:
          enabled: true
          max_steps: 20
          timeout: "120s"
        learning:
          enabled: true
          batch_size: 32
          timeout: "180s"
        creativity:
          enabled: true
          temperature: 0.8
          timeout: "90s"
        multimodal:
          enabled: true
          max_file_size: "50MB"
          timeout: "240s"
        metacognition:
          enabled: true
          reflection_depth: 5
          timeout: "150s"
      
      performance:
        cpu_limit: "2"
        memory_limit: "4Gi"
        gpu_enabled: false
        batch_processing: true
        parallel_execution: true
      
      optimization:
        auto_scaling: true
        load_balancing: true
        caching_strategy: "lru"
        compression: true

  # 元学习配置
  meta_learning.yaml: |
    meta_learning:
      enabled: true
      max_tasks: 100
      batch_size: 32
      learning_rate: 0.001
      
      strategies:
        gradient_based:
          enabled: true
          learning_rate: 0.01
          adaptation_steps: 5
        model_agnostic:
          enabled: true
          inner_lr: 0.01
          outer_lr: 0.001
          adaptation_steps: 5
        memory_augmented:
          enabled: true
          memory_size: 1000
          read_heads: 4
          write_heads: 1
        few_shot:
          enabled: true
          support_size: 5
          query_size: 15
          episodes: 1000
        transfer_learning:
          enabled: true
          source_tasks: 10
          target_adaptation: true
        online_adaptation:
          enabled: true
          adaptation_rate: 0.1
          forgetting_factor: 0.95
      
      performance:
        memory_limit: "8Gi"
        cpu_limit: "4"
        gpu_enabled: true
        distributed_training: false
      
      optimization:
        early_stopping: true
        patience: 10
        min_delta: 0.001
        checkpoint_interval: 100

  # 自我进化配置
  evolution.yaml: |
    evolution:
      enabled: true
      population_size: 50
      generations: 100
      mutation_rate: 0.1
      crossover_rate: 0.8
      
      strategies:
        genetic:
          enabled: true
          selection_method: "tournament"
          tournament_size: 3
          elitism: true
          elite_size: 5
        neuro_evolution:
          enabled: true
          network_complexity: 0.5
          connection_mutation_rate: 0.1
          node_mutation_rate: 0.05
        gradient_free:
          enabled: true
          sigma: 0.1
          learning_rate: 0.01
        hybrid:
          enabled: false
        reinforcement:
          enabled: false
        swarm_intelligence:
          enabled: false
      
      performance:
        cpu_limit: "8"
        memory_limit: "16Gi"
        gpu_enabled: true
        parallel_evaluation: true
      
      optimization:
        target_fitness: 0.95
        convergence_threshold: 0.001
        diversity_maintenance: true
        adaptive_parameters: true

  # 监控配置
  monitoring.yaml: |
    monitoring:
      prometheus:
        enabled: true
        port: 9090
        scrape_interval: "15s"
        evaluation_interval: "15s"
      
      grafana:
        enabled: true
        port: 3000
        admin_user: "admin"
        dashboards_enabled: true
      
      jaeger:
        enabled: false
        port: 16686
        sampling_rate: 0.1
      
      elasticsearch:
        enabled: false
        port: 9200
        index_pattern: "taishanglaojun-*"
      
      alerts:
        enabled: true
        webhook_url: ""
        channels:
          - email
          - slack
        
        rules:
          - name: "high_cpu_usage"
            condition: "cpu_usage > 80"
            duration: "5m"
            severity: "warning"
          - name: "high_memory_usage"
            condition: "memory_usage > 85"
            duration: "5m"
            severity: "warning"
          - name: "service_down"
            condition: "up == 0"
            duration: "1m"
            severity: "critical"
          - name: "high_error_rate"
            condition: "error_rate > 5"
            duration: "2m"
            severity: "warning"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: taishanglaojun
  labels:
    app: nginx
    component: config
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        
        upstream advanced_ai_backend {
            least_conn;
            server advanced-ai-service:8080 max_fails=3 fail_timeout=30s;
        }
        
        server {
            listen 80;
            server_name _;
            
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            location /api/v1/advanced-ai/ {
                proxy_pass http://advanced_ai_backend/api/v1/advanced-ai/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
                
                proxy_buffering on;
                proxy_buffer_size 4k;
                proxy_buffers 8 4k;
                
                client_max_body_size 50m;
            }
            
            location /metrics {
                proxy_pass http://advanced_ai_backend/api/v1/advanced-ai/metrics;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            location / {
                return 404;
            }
        }
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: taishanglaojun
  labels:
    app: prometheus
    component: config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'taishanglaojun'
        environment: 'production'
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093
    
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      - job_name: 'advanced-ai-service'
        static_configs:
          - targets: ['advanced-ai-service:8080']
        metrics_path: '/api/v1/advanced-ai/metrics'
        scrape_interval: 10s
        scrape_timeout: 5s
        
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https
      
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics
      
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

  alerts.yml: |
    groups:
      - name: taishanglaojun.rules
        rules:
          - alert: HighCPUUsage
            expr: (100 - (avg by (instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100)) > 80
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High CPU usage detected"
              description: "CPU usage is above 80% for more than 5 minutes"
          
          - alert: HighMemoryUsage
            expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 > 85
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: "High memory usage detected"
              description: "Memory usage is above 85% for more than 5 minutes"
          
          - alert: ServiceDown
            expr: up == 0
            for: 1m
            labels:
              severity: critical
            annotations:
              summary: "Service is down"
              description: "{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 1 minute"
          
          - alert: HighErrorRate
            expr: rate(http_requests_total{status=~"5.."}[5m]) / rate(http_requests_total[5m]) * 100 > 5
            for: 2m
            labels:
              severity: warning
            annotations:
              summary: "High error rate detected"
              description: "Error rate is above 5% for more than 2 minutes"