# 太上老君监控系统 GitLab CI/CD 流水线配置

# 全局变量
variables:
  # 项目配置
  PROJECT_NAME: "taishanglaojun-monitoring"
  GO_VERSION: "1.21"
  
  # 镜像配置
  REGISTRY: "registry.gitlab.com"
  IMAGE_NAME: "$CI_PROJECT_PATH/monitoring"
  HELM_CHART_NAME: "taishanglaojun-monitoring"
  
  # Docker 配置
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  
  # 缓存配置
  GOCACHE: "/tmp/go-cache"
  GOMODCACHE: "/tmp/go-mod-cache"

# 流水线阶段
stages:
  - prepare      # 准备阶段
  - quality      # 代码质量
  - security     # 安全扫描
  - build        # 构建阶段
  - package      # 打包阶段
  - deploy       # 部署阶段
  - test         # 测试阶段
  - release      # 发布阶段

# 全局缓存配置
cache:
  key: "${CI_COMMIT_REF_SLUG}"
  paths:
    - /tmp/go-cache/
    - /tmp/go-mod-cache/
    - core-services/monitoring/vendor/

# 全局前置脚本
before_script:
  - echo "=== 流水线信息 ==="
  - echo "项目名称: $PROJECT_NAME"
  - echo "提交哈希: $CI_COMMIT_SHA"
  - echo "分支名称: $CI_COMMIT_REF_NAME"
  - echo "流水线ID: $CI_PIPELINE_ID"
  - echo "作业名称: $CI_JOB_NAME"
  - echo "================="

# ==================== 准备阶段 ====================

# 环境准备
prepare:env:
  stage: prepare
  image: golang:${GO_VERSION}-alpine
  script:
    - echo "=== 环境准备 ==="
    - apk add --no-cache git make curl
    - go version
    - git --version
    - echo "环境准备完成"
  artifacts:
    reports:
      dotenv: build.env
    expire_in: 1 hour

# 依赖下载
prepare:deps:
  stage: prepare
  image: golang:${GO_VERSION}-alpine
  script:
    - echo "=== 下载依赖 ==="
    - cd core-services/monitoring
    - go mod download
    - go mod verify
    - echo "依赖下载完成"
  cache:
    key: "go-deps-${CI_COMMIT_REF_SLUG}"
    paths:
      - /tmp/go-mod-cache/
    policy: push

# ==================== 代码质量阶段 ====================

# 代码格式检查
quality:format:
  stage: quality
  image: golang:${GO_VERSION}-alpine
  script:
    - echo "=== 代码格式检查 ==="
    - cd core-services/monitoring
    - |
      if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
        echo "代码格式不符合规范:"
        gofmt -s -l .
        exit 1
      fi
    - echo "代码格式检查通过"
  cache:
    key: "go-deps-${CI_COMMIT_REF_SLUG}"
    paths:
      - /tmp/go-mod-cache/
    policy: pull

# 静态代码分析
quality:lint:
  stage: quality
  image: golang:${GO_VERSION}-alpine
  script:
    - echo "=== 静态代码分析 ==="
    - cd core-services/monitoring
    - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
    - golangci-lint run --timeout=5m --out-format=junit-xml > golangci-lint-report.xml
    - echo "静态代码分析完成"
  artifacts:
    reports:
      junit: core-services/monitoring/golangci-lint-report.xml
    expire_in: 1 week
  cache:
    key: "go-deps-${CI_COMMIT_REF_SLUG}"
    paths:
      - /tmp/go-mod-cache/
    policy: pull

# 单元测试
quality:test:
  stage: quality
  image: golang:${GO_VERSION}-alpine
  script:
    - echo "=== 单元测试 ==="
    - cd core-services/monitoring
    - go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
    - go tool cover -html=coverage.out -o coverage.html
    - go tool cover -func=coverage.out | tail -1
  coverage: '/total:\s+\(statements\)\s+(\d+\.\d+\%)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: core-services/monitoring/coverage.xml
    paths:
      - core-services/monitoring/coverage.html
      - core-services/monitoring/coverage.out
    expire_in: 1 week
  cache:
    key: "go-deps-${CI_COMMIT_REF_SLUG}"
    paths:
      - /tmp/go-mod-cache/
    policy: pull

# 代码质量门禁
quality:sonarqube:
  stage: quality
  image: sonarsource/sonar-scanner-cli:latest
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  script:
    - echo "=== SonarQube 代码质量分析 ==="
    - cd core-services/monitoring
    - sonar-scanner
      -Dsonar.projectKey=$CI_PROJECT_PATH_SLUG-monitoring
      -Dsonar.sources=.
      -Dsonar.host.url=$SONAR_HOST_URL
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.go.coverage.reportPaths=coverage.out
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  dependencies:
    - quality:test
  only:
    - main
    - develop

# ==================== 安全扫描阶段 ====================

# 代码安全扫描
security:gosec:
  stage: security
  image: golang:${GO_VERSION}-alpine
  script:
    - echo "=== 代码安全扫描 ==="
    - cd core-services/monitoring
    - go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
    - gosec -fmt=json -out=gosec-report.json ./...
    - gosec -fmt=junit-xml -out=gosec-report.xml ./...
  artifacts:
    reports:
      junit: core-services/monitoring/gosec-report.xml
    paths:
      - core-services/monitoring/gosec-report.json
    expire_in: 1 week
  cache:
    key: "go-deps-${CI_COMMIT_REF_SLUG}"
    paths:
      - /tmp/go-mod-cache/
    policy: pull

# 依赖安全扫描
security:deps:
  stage: security
  image: golang:${GO_VERSION}-alpine
  script:
    - echo "=== 依赖安全扫描 ==="
    - cd core-services/monitoring
    - go install github.com/sonatypecommunity/nancy@latest
    - go list -json -deps ./... | nancy sleuth > nancy-report.txt
    - go install golang.org/x/vuln/cmd/govulncheck@latest
    - govulncheck ./... > govulncheck-report.txt
  artifacts:
    paths:
      - core-services/monitoring/nancy-report.txt
      - core-services/monitoring/govulncheck-report.txt
    expire_in: 1 week
  cache:
    key: "go-deps-${CI_COMMIT_REF_SLUG}"
    paths:
      - /tmp/go-mod-cache/
    policy: pull

# 密钥扫描
security:secrets:
  stage: security
  image: alpine:latest
  script:
    - echo "=== 密钥扫描 ==="
    - apk add --no-cache git
    - |
      # 安装 gitleaks
      wget -O gitleaks.tar.gz https://github.com/zricethezav/gitleaks/releases/latest/download/gitleaks_linux_x64.tar.gz
      tar -xzf gitleaks.tar.gz
      chmod +x gitleaks
      ./gitleaks detect --source . --report-format json --report-path gitleaks-report.json
  artifacts:
    paths:
      - gitleaks-report.json
    expire_in: 1 week
  allow_failure: true

# ==================== 构建阶段 ====================

# 构建 Docker 镜像
build:docker:
  stage: build
  image: docker:24-dind
  services:
    - docker:24-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "=== 构建 Docker 镜像 ==="
    - cd core-services/monitoring
    - |
      docker build \
        --build-arg VERSION=$CI_COMMIT_TAG \
        --build-arg COMMIT_SHA=$CI_COMMIT_SHA \
        --build-arg BUILD_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
        --tag $REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHA \
        --tag $REGISTRY/$IMAGE_NAME:latest \
        .
    - docker push $REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $REGISTRY/$IMAGE_NAME:latest
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        docker tag $REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHA $REGISTRY/$IMAGE_NAME:$CI_COMMIT_TAG
        docker push $REGISTRY/$IMAGE_NAME:$CI_COMMIT_TAG
      fi
  dependencies:
    - quality:test

# 容器安全扫描
build:container-scan:
  stage: build
  image: aquasec/trivy:latest
  script:
    - echo "=== 容器安全扫描 ==="
    - trivy image --format json --output trivy-report.json $REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHA
    - trivy image --format table $REGISTRY/$IMAGE_NAME:$CI_COMMIT_SHA
  artifacts:
    paths:
      - trivy-report.json
    expire_in: 1 week
  dependencies:
    - build:docker

# ==================== 打包阶段 ====================

# 打包 Helm Chart
package:helm:
  stage: package
  image: alpine/helm:3.12.0
  script:
    - echo "=== 打包 Helm Chart ==="
    - cd core-services/monitoring
    - |
      # 添加依赖仓库
      helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
      helm repo add grafana https://grafana.github.io/helm-charts
      helm repo add influxdata https://helm.influxdata.com/
      helm repo add jaegertracing https://jaegertracing.github.io/helm-charts
      helm repo update
    - |
      # 更新 Chart 版本
      cd helm
      if [ -n "$CI_COMMIT_TAG" ]; then
        CHART_VERSION=${CI_COMMIT_TAG#v}
        sed -i "s/^version:.*/version: ${CHART_VERSION}/" Chart.yaml
        sed -i "s/^appVersion:.*/appVersion: \"${CI_COMMIT_TAG}\"/" Chart.yaml
      fi
    - helm dependency update
    - helm lint .
    - cd ..
    - mkdir -p charts
    - helm package helm/ --destination ./charts/
    - helm repo index ./charts/ --url https://charts.taishanglaojun.com
  artifacts:
    paths:
      - core-services/monitoring/charts/
    expire_in: 1 month

# ==================== 部署阶段 ====================

# 部署到开发环境
deploy:dev:
  stage: deploy
  image: bitnami/kubectl:latest
  environment:
    name: development
    url: https://monitoring-dev.taishanglaojun.com
  script:
    - echo "=== 部署到开发环境 ==="
    - echo $KUBE_CONFIG_DEV | base64 -d > /tmp/kubeconfig
    - export KUBECONFIG=/tmp/kubeconfig
    - |
      # 安装 Helm
      curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    - |
      # 部署应用
      helm upgrade --install taishanglaojun-monitoring-dev \
        ./core-services/monitoring/charts/*.tgz \
        --namespace taishanglaojun-monitoring-dev \
        --create-namespace \
        --set image.tag=$CI_COMMIT_SHA \
        --set ingress.hosts[0].host=monitoring-dev.taishanglaojun.com \
        --set global.environment=development \
        --wait --timeout=10m
  dependencies:
    - package:helm
    - build:docker
  only:
    - develop

# 部署到预发布环境
deploy:staging:
  stage: deploy
  image: bitnami/kubectl:latest
  environment:
    name: staging
    url: https://monitoring-staging.taishanglaojun.com
  script:
    - echo "=== 部署到预发布环境 ==="
    - echo $KUBE_CONFIG_STAGING | base64 -d > /tmp/kubeconfig
    - export KUBECONFIG=/tmp/kubeconfig
    - |
      # 安装 Helm
      curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    - |
      # 部署应用
      helm upgrade --install taishanglaojun-monitoring-staging \
        ./core-services/monitoring/charts/*.tgz \
        --namespace taishanglaojun-monitoring-staging \
        --create-namespace \
        --set image.tag=$CI_COMMIT_SHA \
        --set ingress.hosts[0].host=monitoring-staging.taishanglaojun.com \
        --set global.environment=staging \
        --wait --timeout=10m
  dependencies:
    - package:helm
    - build:docker
  only:
    - main

# 部署到生产环境
deploy:prod:
  stage: deploy
  image: bitnami/kubectl:latest
  environment:
    name: production
    url: https://monitoring.taishanglaojun.com
  script:
    - echo "=== 部署到生产环境 ==="
    - echo $KUBE_CONFIG_PROD | base64 -d > /tmp/kubeconfig
    - export KUBECONFIG=/tmp/kubeconfig
    - |
      # 安装 Helm
      curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
    - |
      # 部署应用
      helm upgrade --install taishanglaojun-monitoring \
        ./core-services/monitoring/charts/*.tgz \
        --namespace taishanglaojun-monitoring \
        --create-namespace \
        --set image.tag=$CI_COMMIT_TAG \
        --set ingress.hosts[0].host=monitoring.taishanglaojun.com \
        --set global.environment=production \
        --set autoscaling.enabled=true \
        --set persistence.enabled=true \
        --wait --timeout=15m
  dependencies:
    - package:helm
    - build:docker
  when: manual
  only:
    - tags

# ==================== 测试阶段 ====================

# 集成测试
test:integration:
  stage: test
  image: golang:${GO_VERSION}-alpine
  script:
    - echo "=== 集成测试 ==="
    - cd core-services/monitoring
    - go test -tags=integration ./tests/integration/... -v
  dependencies:
    - deploy:dev
  only:
    - develop

# 端到端测试
test:e2e:
  stage: test
  image: cypress/included:latest
  script:
    - echo "=== 端到端测试 ==="
    - cd core-services/monitoring/tests/e2e
    - npm ci
    - npx cypress run --config baseUrl=https://monitoring-dev.taishanglaojun.com
  artifacts:
    when: always
    paths:
      - core-services/monitoring/tests/e2e/cypress/videos/
      - core-services/monitoring/tests/e2e/cypress/screenshots/
    expire_in: 1 week
  dependencies:
    - deploy:dev
  only:
    - develop

# 性能测试
test:performance:
  stage: test
  image: golang:${GO_VERSION}-alpine
  script:
    - echo "=== 性能测试 ==="
    - cd core-services/monitoring
    - go test -bench=. -benchmem ./tests/performance/... > performance-report.txt
    - cat performance-report.txt
  artifacts:
    paths:
      - core-services/monitoring/performance-report.txt
    expire_in: 1 week
  dependencies:
    - deploy:dev
  only:
    - develop

# ==================== 发布阶段 ====================

# 创建 GitLab Release
release:gitlab:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "=== 创建 GitLab Release ==="
  release:
    name: '太上老君监控系统 $CI_COMMIT_TAG'
    description: |
      ## 🚀 新功能和改进
      
      详细变更请查看提交历史。
      
      ## 📦 部署信息
      
      - Docker 镜像: `$REGISTRY/$IMAGE_NAME:$CI_COMMIT_TAG`
      - Helm Chart: `$HELM_CHART_NAME-$CI_COMMIT_TAG.tgz`
      
      ## 🔧 部署命令
      
      ```bash
      # 使用 Helm 部署
      helm upgrade --install taishanglaojun-monitoring \
        ./charts/$HELM_CHART_NAME-$CI_COMMIT_TAG.tgz \
        --namespace taishanglaojun-monitoring \
        --create-namespace
      ```
    tag_name: '$CI_COMMIT_TAG'
    ref: '$CI_COMMIT_TAG'
    assets:
      links:
        - name: 'Docker 镜像'
          url: '$CI_REGISTRY_URL/$IMAGE_NAME:$CI_COMMIT_TAG'
        - name: 'Helm Chart'
          url: '$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/browse/core-services/monitoring/charts?job=package:helm'
  dependencies:
    - package:helm
  only:
    - tags

# 推送到 Helm 仓库
release:helm-repo:
  stage: release
  image: alpine/helm:3.12.0
  script:
    - echo "=== 推送到 Helm 仓库 ==="
    - cd core-services/monitoring
    - |
      # 推送到 OCI 注册表
      echo $CI_REGISTRY_PASSWORD | helm registry login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
      helm push charts/*.tgz oci://$CI_REGISTRY/$CI_PROJECT_PATH/charts
  dependencies:
    - package:helm
  only:
    - tags

# ==================== 通知配置 ====================

# 成功通知
.notify_success: &notify_success
  after_script:
    - |
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"✅ 太上老君监控系统流水线成功\\n项目: $CI_PROJECT_NAME\\n分支: $CI_COMMIT_REF_NAME\\n提交: $CI_COMMIT_SHA\\n流水线: $CI_PIPELINE_URL\"}" \
        $SLACK_WEBHOOK_URL

# 失败通知
.notify_failure: &notify_failure
  after_script:
    - |
      curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"❌ 太上老君监控系统流水线失败\\n项目: $CI_PROJECT_NAME\\n分支: $CI_COMMIT_REF_NAME\\n提交: $CI_COMMIT_SHA\\n流水线: $CI_PIPELINE_URL\"}" \
        $SLACK_WEBHOOK_URL

# 应用通知到关键作业
deploy:prod:
  <<: *notify_success

# 全局失败处理
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG